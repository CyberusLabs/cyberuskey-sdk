!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("cyberuskey-sdk",[],t):"object"==typeof exports?exports["cyberuskey-sdk"]=t():e["cyberuskey-sdk"]=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CyberusKeyAPI=void 0;t.CyberusKeyAPI=class{constructor(e,t,r=600){this._apiUrl=new URL("/api/v2/",e),this._geoProvider=t,this._delayMs=r}createSession(e,t,r){return n(this,void 0,void 0,(function*(){const n={client_id:e};r?(n.lat=r.latitude,n.lng=r.longitude):this._cachedGeo&&(n.lat=this._cachedGeo.latitude,n.lng=this._cachedGeo.longitude),t&&(n.origin=t);const o={method:"POST",body:this._getUrlEncodedBody(n),headers:{"Content-Type":"application/x-www-form-urlencoded"}};return fetch(this._getUrl("sessions"),o).then(e=>e.json()).then(e=>e.data.session_id)}))}getOTPSound(e){const t={headers:{Accept:"audio/mpeg","Content-Type":"text/plain"}};return fetch(this._getUrl("sessions/"+e),t).then(e=>e.arrayBuffer()).then(e=>new Blob([e],{type:"audio/mpeg"})).then(e=>window.URL.createObjectURL(e)).catch(e=>e)}getAuthenticationEndpointUrl(e,t,r,n,o,i,s="code"){const c={session_id:e,client_id:r,scope:t.getValue(),redirect_uri:n,response_type:s};o&&(c.state=o),i&&(c.nonce=i);const u=new URL(this._getUrl("authenticate"));return Object.keys(c).forEach(e=>{u.searchParams.append(e,c[e])}),u.href}navigateAuthentication(e,t,r,n,o,i,s,c,u="code"){const a=this.getAuthenticationEndpointUrl(o,r,e,t,s,c,u);return n.navigate(a)}loginThroughCyberusKeyDashboard(e){return n(this,void 0,void 0,(function*(){const t={client_id:e.clientId,scope:e.scope.getValue(),redirect_uri:e.redirectUri,response_type:e.responseType,state:e.state,nonce:e.nonce,display:e.display||"page",prompt:e.prompt,theme:e.theme};e.state&&(t.state=e.state),e.nonce&&(t.nonce=e.nonce);const r=new URL(this._getUrl("authenticate"));Object.keys(t).forEach(e=>{r.searchParams.append(e,t[e])}),yield e.navigator.navigate(r.href)}))}_getUrl(e){return new URL(e,this._apiUrl).href}_getUrlEncodedBody(e){return Object.keys(e).reduce((t,r)=>{const n=encodeURIComponent(r),o=encodeURIComponent(e[r]);return t.push(`${n}=${o}`),t},[]).join("&")}_timeout(e){return new Promise(t=>setTimeout(t,e))}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.MissingRedirectUri=t.OTPGenerationError=t.ResourceNotFoundError=t.OpenApiError=t.WrongJsonError=t.TooManyCallsError=t.UnknownError=t.CyberusKeyError=t.ErrorCode=t.errorFactory=void 0,function(e){e[e[void 0]=1]="undefined",e[e.unknown_error=2]="unknown_error",e[e.server_error=3]="server_error",e[e.wrong_json=4]="wrong_json",e[e.openapi_error=5]="openapi_error",e[e.resource_not_found=6]="resource_not_found",e[e.otp_generation_failure=7]="otp_generation_failure",e[e.invalid_redirect_uri=8]="invalid_redirect_uri",e[e.invalid_client=9]="invalid_client",e[e.too_many_calls_error=10]="too_many_calls_error"}(n||(n={})),t.ErrorCode=n;class o extends Error{constructor(e,t){super(t),this._code=n[e]}get code(){return n[this._code]}get description(){return this.message}}t.CyberusKeyError=o;class i extends o{constructor(e="unknown_error",t="Unknown error occured."){super(e,t)}}t.UnknownError=i;class s extends o{constructor(e="too_many_calls_error",t="You've done too many calls."){super(e,t)}}t.TooManyCallsError=s;t.MissingRedirectUri=class extends o{constructor(){super("invalid_redirect_uri","Missing redirection URI.")}};class c extends o{}t.WrongJsonError=c;class u extends o{}t.OpenApiError=u;class a extends o{}t.ResourceNotFoundError=a;class d extends o{}t.OTPGenerationError=d;const l={[n.undefined]:i,[n.unknown_error]:i,[n.server_error]:i,[n.undefined]:c,[n.wrong_json]:c,[n.openapi_error]:u,[n.resource_not_found]:a,[n.otp_generation_failure]:d,[n.invalid_redirect_uri]:class extends o{},[n.invalid_client]:class extends o{},[n.too_many_calls_error]:s};t.errorFactory=function(e,t){const r=n[e];return new(0,l[r])(e,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Geolocation=void 0;t.Geolocation=class{constructor(e,t,r){this._latitude=e,this._longitude=t,this._accuracy=r}get latitude(){return this._latitude}get longitude(){return this._longitude}get accuracy(){return this._accuracy}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(0),t),o(r(1),t),o(r(4),t),o(r(5),t),o(r(6),t),o(r(7),t),o(r(2),t),o(r(8),t),o(r(9),t),o(r(10),t);const i=r(0);t.default=i.CyberusKeyAPI},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RedirectNavigator=void 0;const o=r(1);t.RedirectNavigator=class{navigate(e){return n(this,void 0,void 0,(function*(){if(!e)throw new o.MissingRedirectUri;return window.location.href=e,Promise.resolve()}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OpenIdScopeParser=void 0;t.OpenIdScopeParser=class{constructor(){this._scope=["openid"]}addEmail(){return this._scope.includes("email")||this._scope.push("email"),this}addProfile(){return this._scope.includes("profile")||this._scope.push("profile"),this}getValue(){return this._scope.join(" ")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Session=void 0;t.Session=class{constructor(e){this.sessionId=e.session_id,this.createdAt=new Date(e.created_at)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.HTML5GeoProvider=void 0;const o=r(2);t.HTML5GeoProvider=class{constructor(e=!1,t=window.navigator){this._enableHighAccuracy=e,this._navigator=t}getGeo(){return n(this,void 0,void 0,(function*(){let e=null;try{e=yield this._getGeo(this._enableHighAccuracy)}catch(e){return null}const{coords:t}=e;return new o.Geolocation(t.latitude,t.longitude,t.accuracy)}))}_getGeo(e){return new Promise((t,r)=>{console.log("enableHighAccuracy: "+e),this._navigator.geolocation.getCurrentPosition(t,r,{enableHighAccuracy:e})})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoginOptions=void 0;t.LoginOptions=class{constructor(){this.responseType="code",this.display="page",this.prompt="login,none",this.theme="default"}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,