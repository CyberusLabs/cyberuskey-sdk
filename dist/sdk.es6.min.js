!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("cyberuskey-sdk",[],t):"object"==typeof exports?exports["cyberuskey-sdk"]=t():e["cyberuskey-sdk"]=t()}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e[void 0]=1]="undefined",e[e.unknown_error=2]="unknown_error",e[e.server_error=3]="server_error",e[e.wrong_json=4]="wrong_json",e[e.openapi_error=5]="openapi_error",e[e.resource_not_found=6]="resource_not_found",e[e.otp_generation_failure=7]="otp_generation_failure",e[e.invalid_redirect_uri=8]="invalid_redirect_uri",e[e.invalid_client=9]="invalid_client",e[e.too_many_calls_error=10]="too_many_calls_error"}(o||(o={})),t.ErrorCode=o;class r extends Error{constructor(e,t){super(t),this._code=o[e]}get code(){return o[this._code]}get description(){return this.message}}t.CyberusKeyError=r;class i extends r{constructor(e="unknown_error",t="Unknown error occured."){super(e,t)}}t.UnknownError=i;class s extends r{constructor(e="too_many_calls_error",t="You've done too many calls."){super(e,t)}}t.TooManyCallsError=s;t.MissingRedirectUri=class extends r{constructor(){super("invalid_redirect_uri","Missing redirection URI.")}};class c extends r{}t.WrongJsonError=c;class u extends r{}t.OpenApiError=u;class a extends r{}t.ResourceNotFoundError=a;class d extends r{}t.OTPGenerationError=d;const l={[o.undefined]:i,[o.unknown_error]:i,[o.server_error]:i,[o.undefined]:c,[o.wrong_json]:c,[o.openapi_error]:u,[o.resource_not_found]:a,[o.otp_generation_failure]:d,[o.invalid_redirect_uri]:class extends r{},[o.invalid_client]:class extends r{},[o.too_many_calls_error]:s};t.errorFactory=function(e,t){const n=o[e];return new(0,l[n])(e,t)}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(2);t.CyberusKeyAPI=class{constructor(e,t,n=600){this._apiUrl=new URL("/api/v2/",e),this._geoProvider=t,this._delayMs=n}createSession(e,t,n){return o(this,void 0,void 0,(function*(){const o={client_id:e};t&&(o.lat=t.latitude,o.lng=t.longitude),n&&(o.origin=n);const s=yield fetch(this._getUrl("sessions"),{method:"POST",body:this._getUrlEncodedBody(o),headers:{"Content-Type":"application/x-www-form-urlencoded"}}),c=yield s.json();if(s.ok&&201===s.status&&c.success)return new i.Session(c.data);if(!c.error)throw new r.UnknownError;throw r.errorFactory(c.error,c.error_description)}))}getOTPSound(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this._getUrl("sessions/"+e.sessionId),{headers:{Accept:"audio/mpeg","Content-Type":"text/plain"}}),n=t.buffer||t.arrayBuffer;return yield n.call(t)}))}getAuthenticationEndpointUrl(e,t,n,o,r,i,s="code"){const c={session_id:e.sessionId,client_id:n,scope:t.getValue(),redirect_uri:o,response_type:s};r&&(c.state=r),i&&(c.nonce=i);const u=new URL(this._getUrl("authenticate"));return Object.keys(c).forEach(e=>{u.searchParams.append(e,c[e])}),u.href}authenticate(e,t,n,r,i,s,c,u,a="code"){return o(this,void 0,void 0,(function*(){this._geoProvider&&!this._cachedGeo&&(this._cachedGeo=yield this._geoProvider.getGeo());const o=yield this.createSession(e,this._cachedGeo,s),d=yield this.getOTPSound(o),l=this.getAuthenticationEndpointUrl(o,n,e,t,c,u,a);console.info(`Navigating to ${l}.`),yield i.navigate(l),yield this._timeout(1e3),console.info("Sound emitting."),yield r.emit(d)}))}navigateAndGetTheSound(e,t,n,r,i,s,c,u="code"){return o(this,void 0,void 0,(function*(){this._geoProvider&&!this._cachedGeo&&(this._cachedGeo=yield this._geoProvider.getGeo());const o=yield this.createSession(e,this._cachedGeo,i),a=yield this.getOTPSound(o),d=this.getAuthenticationEndpointUrl(o,n,e,t,s,c,u);return console.info(`Navigating to ${d}.`),yield r.navigate(d),yield this._timeout(this._delayMs),a}))}loginThroughCyberusKeyDashboard(e){return o(this,void 0,void 0,(function*(){const t={client_id:e.clientId,scope:e.scope.getValue(),redirect_uri:e.redirectUri,response_type:e.responseType,state:e.state,nonce:e.nonce,display:e.display||"page",prompt:e.prompt,theme:e.theme};e.state&&(t.state=e.state),e.nonce&&(t.nonce=e.nonce);const n=new URL(this._getUrl("authenticate"));Object.keys(t).forEach(e=>{n.searchParams.append(e,t[e])}),console.info(`Navigating to ${n.href}.`),yield e.navigator.navigate(n.href)}))}_getUrl(e){return new URL(e,this._apiUrl).href}_getUrlEncodedBody(e){return Object.keys(e).reduce((t,n)=>{const o=encodeURIComponent(n),r=encodeURIComponent(e[n]);return t.push(`${o}=${r}`),t},[]).join("&")}_timeout(e){return new Promise(t=>setTimeout(t,e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Session=class{constructor(e){this.sessionId=e.session_id,this.createdAt=new Date(e.created_at)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Geolocation=class{constructor(e,t,n){this._latitude=e,this._longitude=t,this._accuracy=n}get latitude(){return this._latitude}get longitude(){return this._longitude}get accuracy(){return this._accuracy}}},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(1)),o(n(5)),o(n(0)),o(n(6)),o(n(7)),o(n(2)),o(n(3)),o(n(8)),o(n(9));const r=n(1);t.default=r.CyberusKeyAPI},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.WebAudioSoundEmitter=class{emit(e){return o(this,void 0,void 0,(function*(){let t;try{t=new(window.AudioContext||window.webkitAudioContext)}catch(e){throw new r.OTPGenerationError("otp_generation_failure","AudioContext is not supported")}const n=t.createBufferSource();t.decodeAudioData(e,e=>{n.buffer=e,n.connect(t.destination),n.start(0)}),yield new Promise(e=>{n.onended=e})}))}}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.RedirectNavigator=class{navigate(e){return o(this,void 0,void 0,(function*(){if(!e)throw new r.MissingRedirectUri;return window.location.href=e,Promise.resolve()}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.OpenIdScopeParser=class{constructor(){this._scope=["openid"]}addEmail(){return this._scope.includes("email")||this._scope.push("email"),this}addProfile(){return this._scope.includes("profile")||this._scope.push("profile"),this}getValue(){return this._scope.join(" ")}}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.HTML5GeoProvider=class{constructor(e=!1,t=window.navigator){this._enableHighAccuracy=e,this._navigator=t}getGeo(){return o(this,void 0,void 0,(function*(){let e=null;try{e=yield this._getGeo(this._enableHighAccuracy)}catch(e){return null}const{coords:t}=e;return new r.Geolocation(t.latitude,t.longitude,t.accuracy)}))}_getGeo(e){return new Promise((t,n)=>{console.log("enableHighAccuracy: "+e),this._navigator.geolocation.getCurrentPosition(t,n,{enableHighAccuracy:e})})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LoginOptions=class{constructor(){this.responseType="code",this.display="page",this.prompt="login,none",this.theme="default"}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,