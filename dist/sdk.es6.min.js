!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("cyberuskey-sdk",[],t):"object"==typeof exports?exports["cyberuskey-sdk"]=t():e["cyberuskey-sdk"]=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CyberusKeyAPI=void 0;t.CyberusKeyAPI=class{constructor(e,t,r=600){this._apiUrl=new URL("/api/v2/",e),this._geoProvider=t,this._delayMs=r}createSession(e,t,r){return n(this,void 0,void 0,(function*(){const n={client_id:e};if(r)n.lat=r.latitude,n.lng=r.longitude;else if(this._geoProvider){const e=yield this._geoProvider.getGeo();e&&(n.lat=e.latitude,n.lng=e.longitude)}t&&(n.origin=t);const o={method:"POST",body:this._getUrlEncodedBody(n),headers:{"Content-Type":"application/x-www-form-urlencoded"}};return fetch(this._getUrl("sessions"),o).then(e=>e.json()).then(e=>e.data.session_id)}))}isOutOfService(){return n(this,void 0,void 0,(function*(){let e=new URL(document.location.href).searchParams.get("error");if(null!=e&&"otp_timeout_error"==e){let e=sessionStorage.getItem("auth_active");if(null!=e&&"true"===e){sessionStorage.removeItem("auth_active");let e=sessionStorage.getItem("auth_counter");if(null!=e){let t=parseInt(e,10);isNaN(t)||sessionStorage.setItem("auth_counter",(t+1).toString())}else sessionStorage.setItem("auth_counter","1")}}else sessionStorage.removeItem("auth_counter");return fetch(this._getUrl("version"),{headers:{Accept:"application/json"}}).then(e=>e.json()).then(e=>e.outOfService).catch(e=>e)}))}getOTPSound(e){const t={headers:{Accept:"audio/mpeg","Content-Type":"text/plain"}};return fetch(this._getUrl("sessions/"+e),t).then(e=>e.arrayBuffer()).then(e=>new Blob([e],{type:"audio/mpeg"})).then(e=>window.URL.createObjectURL(e)).catch(e=>e)}getAuthenticationEndpointUrl(e,t,r,n,o,i,s="code"){const c={session_id:e,client_id:r,scope:t.getValue(),redirect_uri:n,response_type:s};o&&(c.state=o),i&&(c.nonce=i);const u=new URL(this._getUrl("authenticate"));return Object.keys(c).forEach(e=>{u.searchParams.append(e,c[e])}),u.href}navigateAuthentication(e,t,r,n,o,i,s,c,u="code"){const a=this.getAuthenticationEndpointUrl(o,r,e,t,s,c,u);return sessionStorage.setItem("auth_active","true"),n.navigate(a)}loginThroughCyberusKeyDashboard(e){return n(this,void 0,void 0,(function*(){const t={client_id:e.clientId,scope:e.scope.getValue(),redirect_uri:e.redirectUri,response_type:e.responseType,state:e.state,nonce:e.nonce,display:e.display||"page",prompt:e.prompt,theme:e.theme};e.state&&(t.state=e.state),e.nonce&&(t.nonce=e.nonce);const r=new URL(this._getUrl("authenticate"));Object.keys(t).forEach(e=>{r.searchParams.append(e,t[e])}),yield e.navigator.navigate(r.href)}))}_getUrl(e){return new URL(e,this._apiUrl).href}_getUrlEncodedBody(e){return Object.keys(e).reduce((t,r)=>{const n=encodeURIComponent(r),o=encodeURIComponent(e[r]);return t.push(`${n}=${o}`),t},[]).join("&")}_timeout(e){return new Promise(t=>setTimeout(t,e))}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.MissingRedirectUri=t.OTPGenerationError=t.ResourceNotFoundError=t.OpenApiError=t.WrongJsonError=t.TooManyCallsError=t.UnknownError=t.CyberusKeyError=t.ErrorCode=t.errorFactory=void 0,function(e){e[e[void 0]=1]="undefined",e[e.unknown_error=2]="unknown_error",e[e.server_error=3]="server_error",e[e.wrong_json=4]="wrong_json",e[e.openapi_error=5]="openapi_error",e[e.resource_not_found=6]="resource_not_found",e[e.otp_generation_failure=7]="otp_generation_failure",e[e.invalid_redirect_uri=8]="invalid_redirect_uri",e[e.invalid_client=9]="invalid_client",e[e.too_many_calls_error=10]="too_many_calls_error"}(n||(n={})),t.ErrorCode=n;class o extends Error{constructor(e,t){super(t),this._code=n[e]}get code(){return n[this._code]}get description(){return this.message}}t.CyberusKeyError=o;class i extends o{constructor(e="unknown_error",t="Unknown error occured."){super(e,t)}}t.UnknownError=i;class s extends o{constructor(e="too_many_calls_error",t="You've done too many calls."){super(e,t)}}t.TooManyCallsError=s;t.MissingRedirectUri=class extends o{constructor(){super("invalid_redirect_uri","Missing redirection URI.")}};class c extends o{}t.WrongJsonError=c;class u extends o{}t.OpenApiError=u;class a extends o{}t.ResourceNotFoundError=a;class l extends o{}t.OTPGenerationError=l;const d={[n.undefined]:i,[n.unknown_error]:i,[n.server_error]:i,[n.undefined]:c,[n.wrong_json]:c,[n.openapi_error]:u,[n.resource_not_found]:a,[n.otp_generation_failure]:l,[n.invalid_redirect_uri]:class extends o{},[n.invalid_client]:class extends o{},[n.too_many_calls_error]:s};t.errorFactory=function(e,t){const r=n[e];return new(0,d[r])(e,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Geolocation=void 0;t.Geolocation=class{constructor(e,t,r){this._latitude=e,this._longitude=t,this._accuracy=r}get latitude(){return this._latitude}get longitude(){return this._longitude}get accuracy(){return this._accuracy}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(0),t),o(r(1),t),o(r(4),t),o(r(5),t),o(r(6),t),o(r(7),t),o(r(2),t),o(r(8),t),o(r(9),t),o(r(10),t);const i=r(0);t.default=i.CyberusKeyAPI},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RedirectNavigator=void 0;const o=r(1);t.RedirectNavigator=class{navigate(e){return n(this,void 0,void 0,(function*(){if(!e)throw new o.MissingRedirectUri;return window.location.href=e,Promise.resolve()}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OpenIdScopeParser=void 0;t.OpenIdScopeParser=class{constructor(){this._scope=["openid"]}addEmail(){return this._scope.includes("email")||this._scope.push("email"),this}addProfile(){return this._scope.includes("profile")||this._scope.push("profile"),this}getValue(){return this._scope.join(" ")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Session=void 0;t.Session=class{constructor(e){this.sessionId=e.session_id,this.createdAt=new Date(e.created_at)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function c(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,c)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.HTML5GeoProvider=void 0;const o=r(2);t.HTML5GeoProvider=class{constructor(e=!1,t=null,r=2,n=window.navigator){this._numOfTriesBeforeGpsActivates=2,this.defaultMessage="Cyberus Key widget would like to access your location to use geolocation tracking to assert successful authentication.",this._enableHighAccuracy=e,this._navigator=n,this._numOfTriesBeforeGpsActivates=r,this._onPermissionDialog=t}getGeo(){return n(this,void 0,void 0,(function*(){let e=null,t=sessionStorage.getItem("auth_counter");if(null==t)return null;let r=parseInt(t,10);if(isNaN(r)||r<this._numOfTriesBeforeGpsActivates)return null;try{const t=this._onPermissionDialog,r=this.defaultMessage;navigator.permissions&&navigator.permissions.query({name:"geolocation"}).then((function(e){"prompt"==e.state&&(t?t(r):alert(r))})),e=yield this._getGeo(this._enableHighAccuracy)}catch(e){return null}const{coords:n}=e;return new o.Geolocation(n.latitude,n.longitude,n.accuracy)}))}_getGeo(e){return new Promise((t,r)=>{this._navigator.geolocation.getCurrentPosition(t,r,{enableHighAccuracy:e})})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoginOptions=void 0;t.LoginOptions=class{constructor(){this.responseType="code",this.display="page",this.prompt="login,none",this.theme="default"}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2FwaS50cyIsIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay8uL3NyYy9zZGsvZXJyb3JzLnRzIiwid2VicGFjazovL2N5YmVydXNrZXktc2RrLy4vc3JjL3Nkay9nZW9Qcm92aWRlci9nZW8udHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL25hdmlnYXRvci9yZWRpcmVjdE5hdmlnYXRvci50cyIsIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay8uL3NyYy9zZGsvc2NvcGVQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL3Nlc3Npb24udHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2dlb1Byb3ZpZGVyL2h0bWw1R2VvUHJvdmlkZXIudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2xvZ2luT3B0aW9ucy50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaG9zdFVybCIsImdlb1Byb3ZpZGVyIiwiZGVsYXlNcyIsInRoaXMiLCJfYXBpVXJsIiwiVVJMIiwiX2dlb1Byb3ZpZGVyIiwiX2RlbGF5TXMiLCJjbGllbnRJZCIsIm9yaWdpbiIsImdlbyIsImRhdGEiLCJjbGllbnRfaWQiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImdwcyIsImdldEdlbyIsInBhcmFtcyIsIm1ldGhvZCIsImJvZHkiLCJfZ2V0VXJsRW5jb2RlZEJvZHkiLCJoZWFkZXJzIiwiZmV0Y2giLCJfZ2V0VXJsIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsInNlc3Npb25faWQiLCJlcnJQYWdlTXNnIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJzZWFyY2hQYXJhbXMiLCJhdXRoQWN0aXZlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsImF1dGhDb3VudGVyIiwiYXV0aENvdW50ZXJWYWx1ZSIsInBhcnNlSW50IiwiaXNOYU4iLCJzZXRJdGVtIiwidG9TdHJpbmciLCJ2ZXJzaW9uSnNvbiIsIm91dE9mU2VydmljZSIsImNhdGNoIiwiZXJyIiwic2Vzc2lvbiIsInJlcXVlc3RPcHRpb25zIiwiYXJyYXlCdWZmZXIiLCJCbG9iIiwidHlwZSIsImJsb2IiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXNzaW9uSWQiLCJzY29wZSIsInJlZGlyZWN0VXJpIiwic3RhdGUiLCJub25jZSIsInJlc3BvbnNlVHlwZSIsImdldFZhbHVlIiwicmVkaXJlY3RfdXJpIiwicmVzcG9uc2VfdHlwZSIsInVybCIsImtleXMiLCJmb3JFYWNoIiwicGFyYW1ldGVyTmFtZSIsImFwcGVuZCIsIm5hdmlnYXRvciIsImF1dGhlbnRpY2F0ZVVybCIsImdldEF1dGhlbnRpY2F0aW9uRW5kcG9pbnRVcmwiLCJuYXZpZ2F0ZSIsIm9wdGlvbnMiLCJkaXNwbGF5IiwicHJvbXB0IiwidGhlbWUiLCJwYXRoIiwicmVkdWNlIiwicmVzdWx0IiwiZW5jb2RlZEtleSIsImVuY29kZVVSSUNvbXBvbmVudCIsImVuY29kZWRWYWx1ZSIsInB1c2giLCJqb2luIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJFcnJvckNvZGUiLCJDeWJlcnVzS2V5RXJyb3IiLCJFcnJvciIsImNvZGUiLCJtZXNzYWdlIiwic3VwZXIiLCJfY29kZSIsIlVua25vd25FcnJvciIsIlRvb01hbnlDYWxsc0Vycm9yIiwiTWlzc2luZ1JlZGlyZWN0VXJpIiwiV3JvbmdKc29uRXJyb3IiLCJPcGVuQXBpRXJyb3IiLCJSZXNvdXJjZU5vdEZvdW5kRXJyb3IiLCJPVFBHZW5lcmF0aW9uRXJyb3IiLCJNQVBQSU5HIiwidW5kZWZpbmVkIiwidW5rbm93bl9lcnJvciIsInNlcnZlcl9lcnJvciIsIndyb25nX2pzb24iLCJvcGVuYXBpX2Vycm9yIiwicmVzb3VyY2Vfbm90X2ZvdW5kIiwib3RwX2dlbmVyYXRpb25fZmFpbHVyZSIsImludmFsaWRfcmVkaXJlY3RfdXJpIiwiaW52YWxpZF9jbGllbnQiLCJ0b29fbWFueV9jYWxsc19lcnJvciIsImVycm9yRmFjdG9yeSIsImVudW1fdHlwZSIsIkVycm9yQ29uc3RydWN0b3IiLCJhY2N1cmFjeSIsIl9sYXRpdHVkZSIsIl9sb25naXR1ZGUiLCJfYWNjdXJhY3kiLCJDeWJlcnVzS2V5QVBJIiwiX3Njb3BlIiwiaW5jbHVkZXMiLCJjcmVhdGVkQXQiLCJEYXRlIiwiY3JlYXRlZF9hdCIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsIm9uUGVybWlzc2lvbkRpYWxvZyIsIm51bU9mVHJpZXNCZWZvcmVHcHNBY3RpdmF0ZXMiLCJfbnVtT2ZUcmllc0JlZm9yZUdwc0FjdGl2YXRlcyIsImRlZmF1bHRNZXNzYWdlIiwiX2VuYWJsZUhpZ2hBY2N1cmFjeSIsIl9uYXZpZ2F0b3IiLCJfb25QZXJtaXNzaW9uRGlhbG9nIiwicGVybWlzc2lvbkRpYWxvZyIsInBlcm1pc3Npb25zIiwicXVlcnkiLCJQZXJtaXNzaW9uU3RhdHVzIiwiYWxlcnQiLCJfZ2V0R2VvIiwiY29vcmRzIiwiR2VvbG9jYXRpb24iLCJyZWplY3QiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxpQkFBa0IsR0FBSUgsR0FDSCxpQkFBWkMsUUFDZEEsUUFBUSxrQkFBb0JELElBRTVCRCxFQUFLLGtCQUFvQkMsSUFSM0IsQ0FTR0ssUUFBUSxXQUNYLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVUCxRQUduQyxJQUFJQyxFQUFTSSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIVCxRQUFTLElBVVYsT0FOQVUsRUFBUUgsR0FBVUksS0FBS1YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU00sR0FHL0RMLEVBQU9RLEdBQUksRUFHSlIsRUFBT0QsUUEwRGYsT0FyREFNLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTZCxFQUFTZSxFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVqQixFQUFTZSxJQUNsQ0csT0FBT0MsZUFBZW5CLEVBQVNlLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVYsRUFBb0JnQixFQUFJLFNBQVN0QixHQUNYLG9CQUFYdUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlbkIsRUFBU3VCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxLQVF2RG5CLEVBQW9Cb0IsRUFBSSxT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LEdBQ2lCLFVBQTFCQSxFQUFpQmhGLFFBQ2hCNkUsRUFDREEsRUFBaUJKLEdBRWpCUSxNQUFNUixPQUtoQnBELFFBQWUzRSxLQUFLd0ksUUFBUXhJLEtBQUtnSSxxQkFDakMsU0FFQSxPQUFPLEtBR1QsTUFBTSxPQUFFUyxHQUFXOUQsRUFFbkIsT0FBTyxJQUFJLEVBQUErRCxZQUFZRCxFQUFPL0gsU0FBVStILEVBQU85SCxVQUFXOEgsRUFBT3hCLGFBR25FLFFBQVFVLEdBQ04sT0FBTyxJQUFJekMsUUFBUSxDQUFDQyxFQUFTd0QsS0FDM0IzSSxLQUFLaUksV0FBV1csWUFBWUMsbUJBQW1CMUQsRUFBU3dELEVBQVEsQ0FBRWhCLDRCLG9HQzVFeEUsbUNBdUVXLEtBQUFuRSxhQUF1QixPQVN2QixLQUFBYyxRQUFrQixPQVVsQixLQUFBQyxPQUFpQixhQVFqQixLQUFBQyxNQUFnQiIsImZpbGUiOiJzZGsuZXM2Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiY3liZXJ1c2tleS1zZGtcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiY3liZXJ1c2tleS1zZGtcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiY3liZXJ1c2tleS1zZGtcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsImltcG9ydCB7R2VvbG9jYXRpb259IGZyb20gJy4vZ2VvUHJvdmlkZXIvZ2VvJztcclxuaW1wb3J0IHtHZW9Qcm92aWRlcn0gZnJvbSAnLi9nZW9Qcm92aWRlci9nZW9Qcm92aWRlcic7XHJcbmltcG9ydCB7TmF2aWdhdG9yfSBmcm9tICcuL25hdmlnYXRvci9uYXZpZ2F0b3InO1xyXG5pbXBvcnQge09wZW5JZFNjb3BlUGFyc2VyfSBmcm9tICcuL3Njb3BlUGFyc2VyJztcclxuaW1wb3J0IHtTZXNzaW9ufSBmcm9tICcuL3Nlc3Npb24nO1xyXG5pbXBvcnQge0xvZ2luT3B0aW9uc30gZnJvbSAnLi9sb2dpbk9wdGlvbnMnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDeWJlcnVzIEtleSBBUEkgd2hpY2ggYWxsb3dzIHlvdSB0byBkbyBhIGRlbGVnYXRlIGxvZ2luIHdpdGggT3BlbklkIHByb3RvY29sLlxyXG4gKlxyXG4gKiBAY2xhc3MgQ3liZXJ1c0tleUFQSVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN5YmVydXNLZXlBUEkge1xyXG4gICAgcHJpdmF0ZSBfYXBpVXJsOiBVUkw7XHJcbiAgICBwcml2YXRlIF9nZW9Qcm92aWRlcjogR2VvUHJvdmlkZXI7XHJcbiAgICBwcml2YXRlIF9kZWxheU1zOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKkNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ3liZXJ1c0tleUFQSS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0VXJsIEJhc2UgVVJMIG9mIHRoZSBob3N0IHNlcnZlciwgZS5nLiBgaHR0cHM6Ly9hcGkuY3liZXJ1c2tleS5jb21gXHJcbiAgICAgKiBAcGFyYW0ge0dlb1Byb3ZpZGVyfSBbZ2VvUHJvdmlkZXJdIEdlb2xvY2FsaXphdGlvbiBwcm92aWRlci4gVXNlIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGxpa2UgYEhUTUw1R2VvUHJvdmlkZXJgLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheU1zPTYwMF0gRGVsYXkgKG1zKSBiZXR3ZWVuIG1ha2luZyBhbiBBdXRoZW50aWNhdGlvbiByZXF1ZXN0IGFuZCBhIHNvdW5kIHBsYXlpbmcuXHJcbiAgICAgKiBAbWVtYmVyb2YgQ3liZXJ1c0tleUFQSVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihob3N0VXJsOiBzdHJpbmcsIGdlb1Byb3ZpZGVyPzogR2VvUHJvdmlkZXIsIGRlbGF5TXM6IG51bWJlciA9IDYwMCkge1xyXG4gICAgICAgIHRoaXMuX2FwaVVybCA9IG5ldyBVUkwoJy9hcGkvdjIvJywgaG9zdFVybCk7XHJcbiAgICAgICAgdGhpcy5fZ2VvUHJvdmlkZXIgPSBnZW9Qcm92aWRlcjtcclxuICAgICAgICB0aGlzLl9kZWxheU1zID0gZGVsYXlNcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIEN5YmVydXMgS2V5IHNlc3Npb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIFB1YmxpYyBjbGllbnQgSUQgZ2VuZXJhdGVkIGR1cmluZyBjcmVhdGluZyB0aGUgYWNjb3VudC5cclxuICAgICAqIEBwYXJhbSB7R2VvbG9jYXRpb259IFtnZW9dIEdpdmUgYSB2YWx1ZSBpZiB5b3Ugd2FudCB0byBwYXNzIG9wdGlvbmFsIGdlb2xvY2F0aW9uIG1lYXN1cmVtZW50LlxyXG4gICAgICogICAgSXQgY2FuIGJlIGxhdGVyIHVzZSB0byBjb21wYXJlIGl0IGFnYWluc3QgdGhlIG1vYmlsZSdzIG1lYXN1cmVtZW50IChpZiB5b3UgaGF2ZSBzZXQgYGZhaWxfb25fZ2VvX21pc21hdGNoYCkuXHJcbiAgICAgKiAgICBUaG9zZSBtZWFzdXJlbWVudHMgY2FuIGJlIHVzZWQgYWxzbyB0byBnZW5lcmFsIGltcHJvdmVtZW50IG9mIHRoZSBzZWN1cml0eS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luXSBUaGUgb3JpZ2luIGRvbWFpbiBvZiB0aGUgcmVxdWVzdCBiZWluZyBtYWRlLiBJZiBgbnVsbGAgdGhlbiB0aGUgUmVmZXJlciBoZWFkZXIgd2lsbCBiZSB1c2VkLlxyXG4gICAgICogQHRocm93cyBXcm9uZ0pzb25FcnJvciwgT3BlbkFwaUVycm9yLCBSZXNvdXJjZU5vdEZvdW5kRXJyb3IsIE9UUEdlbmVyYXRpb25FcnJvciwgVW5rbm93bkVycm9yXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBUaGUgQ3liZXJ1cyBLZXkgc2Vzc2lvbiBpZC5cclxuICAgICAqIEBtZW1iZXJvZiBDeWJlcnVzS2V5QVBJXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGVTZXNzaW9uKGNsaWVudElkOiBzdHJpbmcsIG9yaWdpbj86IHN0cmluZywgZ2VvPzogR2VvbG9jYXRpb24pOiBQcm9taXNlPHN0cmluZz4ge1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0ge2NsaWVudF9pZDogY2xpZW50SWR9O1xyXG5cclxuICAgICAgICBpZiAoZ2VvKSB7XHJcbiAgICAgICAgICAgIGRhdGFbJ2xhdCddID0gZ2VvLmxhdGl0dWRlO1xyXG4gICAgICAgICAgICBkYXRhWydsbmcnXSA9IGdlby5sb25naXR1ZGU7XHJcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuX2dlb1Byb3ZpZGVyKXtcclxuICAgICAgICAgICAgY29uc3QgZ3BzID0gYXdhaXQgdGhpcy5fZ2VvUHJvdmlkZXIuZ2V0R2VvKCk7XHJcbiAgICAgICAgICAgIGlmIChncHMpe1xyXG4gICAgICAgICAgICAgICAgZGF0YVsnbGF0J10gPSBncHMubGF0aXR1ZGU7XHJcbiAgICAgICAgICAgICAgICBkYXRhWydsbmcnXSA9IGdwcy5sb25naXR1ZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcmlnaW4pIHtcclxuICAgICAgICAgICAgZGF0YVsnb3JpZ2luJ10gPSBvcmlnaW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiB0aGlzLl9nZXRVcmxFbmNvZGVkQm9keShkYXRhKSxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5fZ2V0VXJsKCdzZXNzaW9ucycpLCBwYXJhbXMpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbigoanNvbikgPT4ganNvbi5kYXRhLnNlc3Npb25faWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIGF1dGhlbnRpY2F0aW9uIHNlcnZlciBpcyBhdmFpbGFibGVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gZmxhZyBpbmRpY2F0aW5nIGlmIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxyXG4gICAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgaXNPdXRPZlNlcnZpY2UoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcblxyXG5cclxuICAgICAgICBsZXQgZXJyUGFnZU1zZyA9IChuZXcgVVJMKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpKS5zZWFyY2hQYXJhbXMuZ2V0KFwiZXJyb3JcIik7XHJcblxyXG4gICAgICAgIGlmIChlcnJQYWdlTXNnICE9bnVsbCAmJiBlcnJQYWdlTXNnID09IFwib3RwX3RpbWVvdXRfZXJyb3JcIil7XHJcbiAgICAgICAgICAgIGxldCBhdXRoQWN0aXZlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImF1dGhfYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBpZiAoYXV0aEFjdGl2ZSAhPW51bGwgJiYgYXV0aEFjdGl2ZSA9PT0gXCJ0cnVlXCIpe1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShcImF1dGhfYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1dGhDb3VudGVyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImF1dGhfY291bnRlclwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChhdXRoQ291bnRlciE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF1dGhDb3VudGVyVmFsdWUgPSBwYXJzZUludChhdXRoQ291bnRlciwgMTApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihhdXRoQ291bnRlclZhbHVlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJhdXRoX2NvdW50ZXJcIiwgKGF1dGhDb3VudGVyVmFsdWUgKyAxKS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiYXV0aF9jb3VudGVyXCIsIFwiMVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwiYXV0aF9jb3VudGVyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGludGVyZmFjZSBWZXJzaW9uUmVzcG9uc2Uge1xyXG4gICAgICAgICAgICB2ZXJzaW9uOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIG1pbk1vYmlsZVZlcnNpb246IHN0cmluZztcclxuICAgICAgICAgICAgbWF4TW9iaWxlVmVyc2lvbjogc3RyaW5nO1xyXG4gICAgICAgICAgICBvdXRPZlNlcnZpY2U6IGJvb2xlYW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMuX2dldFVybChgdmVyc2lvbmApLCByZXF1ZXN0T3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbigodmVyc2lvbkpzb246IFZlcnNpb25SZXNwb25zZSkgPT4gdmVyc2lvbkpzb24ub3V0T2ZTZXJ2aWNlKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSBVUkwgd2l0aCBzb3VuZCB3aXRoIGVtYmVkZGVkIE9UUC4gWW91IGhhdmUgdG8gZW1pdCBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Nlc3Npb259IHNlc3Npb24gQ3liZXJ1cyBLZXkncyBzZXNzaW9uIGdlbmVyYXRlZCBieSBhIHVzZXIgZm9yIGEgbG9naW4uXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBzdHJpbmcgd2l0aCB1cmwgdG8gdGhlIHNvdW5kLlxyXG4gICAgICogQHRocm93cyBSZXNvdXJjZU5vdEZvdW5kRXJyb3JcclxuICAgICAqIEBtZW1iZXJvZiBDeWJlcnVzS2V5QVBJXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgcHVibGljIGdldE9UUFNvdW5kKHNlc3Npb246IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9ICdhdWRpby9tcGVnJztcclxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5fZ2V0VXJsKGBzZXNzaW9ucy8ke3Nlc3Npb259YCksIHJlcXVlc3RPcHRpb25zKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAgIC50aGVuKChhcnJheUJ1ZmZlcikgPT4gbmV3IEJsb2IoW2FycmF5QnVmZmVyXSwge3R5cGU6IHR5cGV9KSlcclxuICAgICAgICAgICAgLnRoZW4oKGJsb2IpID0+IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgT3BlbklEJ3MgQXV0aGVudGljYXRpb24gZW5kcG9pbnQgVVJMIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBwcm9jZXNzIHRoZSBhdXRoZW50aWNhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHVuaXF1ZSBpZCBjcmVhdGVkIGZvciB0aGUgc3BlY2lmaWMgbG9naW4gYW5kIGNvbm5lY3RlZCB0byB0aGUgc3BlY2lmaWMgb3RwXHJcbiAgICAgKiBAcGFyYW0ge09wZW5JZFNjb3BlUGFyc2VyfSBzY29wZSBFYWNoIHNjb3BlIHJldHVybnMgYSBzZXQgb2YgdXNlciBhdHRyaWJ1dGVzLCB3aGljaCBhcmUgY2FsbGVkIGNsYWltcy5cclxuICAgICAqICAgIE9uY2UgdGhlIHVzZXIgYXV0aG9yaXplcyB0aGUgcmVxdWVzdGVkIHNjb3BlcywgdGhlIGNsYWltcyBhcmUgcmV0dXJuZWQgaW4gYW4gSUQgVG9rZW4uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQgUHVibGljIGNsaWVudCBJRCBnZW5lcmF0ZWQgZHVyaW5nIGNyZWF0aW5nIHRoZSBhY2NvdW50LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0VXJpIFJlZGlyZWN0IFVSSSB0byB3aGljaCB0aGUgcmVzcG9uc2Ugd2lsbCBiZSBzZW50LiBJZiB0aGUgdmFsdWUgaXMgbm90IHdoaXRlbGlzdGVkIHRoZW4gdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdGF0ZV1cclxuICAgICAqICAgIFJFQ09NTUVOREVELiBPcGFxdWUgdmFsdWUgdXNlZCB0byBtYWludGFpbiBzdGF0ZSBiZXR3ZWVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgY2FsbGJhY2suIFR5cGljYWxseSwgQ1NSRiwgWFNSRiBtaXRpZ2F0aW9uIGlzIGRvbmUgYnkgY3J5cHRvZ3JhcGhpY2FsbHkgYmluZGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2l0aCBhIGJyb3dzZXIgY29va2llLlxyXG4gICAgICogICAgVGhlIHN0YXRlIHBhcmFtZXRlciBwcmVzZXJ2ZXMgc29tZSBzdGF0ZSBvYmplY3Qgc2V0IGJ5IHRoZSBjbGllbnQgaW4gdGhlIEF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgYW5kIG1ha2VzIGl0IGF2YWlsYWJsZSB0byB0aGUgY2xpZW50IGluIHRoZSByZXNwb25zZS5cclxuICAgICAqICAgIEl04oCZcyB0aGF0IHVuaXF1ZSBhbmQgbm9uLWd1ZXNzYWJsZSB2YWx1ZSB0aGF0IGFsbG93cyB5b3UgdG8gcHJldmVudCB0aGUgYXR0YWNrIGJ5IGNvbmZpcm1pbmcgaWYgdGhlIHZhbHVlIGNvbWluZyBmcm9tIHRoZSByZXNwb25zZSBtYXRjaGVzIHRoZSBvbmUgeW91IGV4cGVjdCAodGhlIG9uZSB5b3UgZ2VuZXJhdGVkIHdoZW4gaW5pdGlhdGluZyB0aGUgcmVxdWVzdCkuXHJcbiAgICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHNvIHlvdSBjYW4gZW5jb2RlIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbiBpdC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbm9uY2VdXHJcbiAgICAgKiAgICBTdHJpbmcgdmFsdWUgdXNlZCB0byBhc3NvY2lhdGUgYSBDbGllbnQgc2Vzc2lvbiB3aXRoIGFuIElEIFRva2VuLCBhbmQgdG8gbWl0aWdhdGUgcmVwbGF5IGF0dGFja3MuXHJcbiAgICAgKiAgICBUaGUgdmFsdWUgaXMgcGFzc2VkIHRocm91Z2ggdW5tb2RpZmllZCBmcm9tIHRoZSBBdXRoZW50aWNhdGlvbiBSZXF1ZXN0IHRvIHRoZSBJRCBUb2tlbi5cclxuICAgICAqICAgIFN1ZmZpY2llbnQgZW50cm9weSBNVVNUIGJlIHByZXNlbnQgaW4gdGhlIG5vbmNlIHZhbHVlcyB1c2VkIHRvIHByZXZlbnQgYXR0YWNrZXJzIGZyb20gZ3Vlc3NpbmcgdmFsdWVzLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZVR5cGU9J2NvZGUnXSBPcGVuSWQgcmVzcG9uc2UgdHlwZS4gVGhlIGRlZmF1bHQgaXMgYGNvZGVgIChDb2RlIEZsb3csIGludm9sdmluZyB0aGUgZnJvbnQtY2hhbm5lbCBhbmQgYmFja2NoYW5uZWwpLlxyXG4gICAgICogQHJldHVybnMgT3BlbklEJ3MgQXV0aGVudGljYXRpb24gZW5kcG9pbnQgVVJMXHJcbiAgICAgKiBAdGhyb3dzIEludmFsaWRSZWRpcmVjdFVyaUVycm9yLCBJbnZhbGlkQ2xpZW50RXJyb3IsIFJlc291cmNlTm90Rm91bmRFcnJvclxyXG4gICAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEF1dGhlbnRpY2F0aW9uRW5kcG9pbnRVcmwoc2Vzc2lvbklkOiBzdHJpbmcsIHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlciwgY2xpZW50SWQ6IHN0cmluZywgcmVkaXJlY3RVcmk6IHN0cmluZywgc3RhdGU/OiBzdHJpbmcsIG5vbmNlPzogc3RyaW5nLCByZXNwb25zZVR5cGUgPSAnY29kZScpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHtcclxuICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxyXG4gICAgICAgICAgICBjbGllbnRfaWQ6IGNsaWVudElkLFxyXG4gICAgICAgICAgICBzY29wZTogc2NvcGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiByZWRpcmVjdFVyaSxcclxuICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogcmVzcG9uc2VUeXBlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGRhdGFbJ3N0YXRlJ10gPSBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5vbmNlKSB7XHJcbiAgICAgICAgICAgIGRhdGFbJ25vbmNlJ10gPSBub25jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodGhpcy5fZ2V0VXJsKCdhdXRoZW50aWNhdGUnKSk7XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKHBhcmFtZXRlck5hbWUpID0+IHtcclxuICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQocGFyYW1ldGVyTmFtZSwgZGF0YVtwYXJhbWV0ZXJOYW1lXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB1cmwuaHJlZjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gQXV0aGVudGljYXRpb24gRW5kcG9pbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpZW50SWQgUHVibGljIGNsaWVudCBJRCBnZW5lcmF0ZWQgZHVyaW5nIGNyZWF0aW5nIHRoZSBhY2NvdW50LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0VXJpIFJlZGlyZWN0IFVSSSB0byB3aGljaCB0aGUgcmVzcG9uc2Ugd2lsbCBiZSBzZW50LiBJZiB0aGUgdmFsdWUgaXMgbm90IHdoaXRlbGlzdGVkIHRoZW4gdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxyXG4gICAgICogQHBhcmFtIHtPcGVuSWRTY29wZVBhcnNlcn0gc2NvcGUgRWFjaCBzY29wZSByZXR1cm5zIGEgc2V0IG9mIHVzZXIgYXR0cmlidXRlcywgd2hpY2ggYXJlIGNhbGxlZCBjbGFpbXMuXHJcbiAgICAgKiAgICBPbmNlIHRoZSB1c2VyIGF1dGhvcml6ZXMgdGhlIHJlcXVlc3RlZCBzY29wZXMsIHRoZSBjbGFpbXMgYXJlIHJldHVybmVkIGluIGFuIElEIFRva2VuLlxyXG4gICAgICogQHBhcmFtIHtOYXZpZ2F0b3J9IG5hdmlnYXRvciBDbGFzcyBkZXNjcmliZXMgYW4gYWN0aW9uIHRoYXQgd2lsbCBiZSBkb25lIHRvIEF1dGhlbnRpY2F0aW9uIFVSTC4gRm9yIGJyb3dzZXJzIGl0IHdpbGwgYmUgYSBwYWdlIHJlZGlyZWN0aW9uLlxyXG4gICAgICogQHBhcmFtIHNlc3Npb24gU2Vzc2lvbiBpZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmlnaW5dIFRoZSBvcmlnaW4gZG9tYWluIG9mIHRoZSByZXF1ZXN0IGJlaW5nIG1hZGUuIElmIGBudWxsYCB0aGVuIHRoZSBSZWZlcmVyIGhlYWRlciB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0YXRlXVxyXG4gICAgICogICAgUkVDT01NRU5ERUQuIE9wYXF1ZSB2YWx1ZSB1c2VkIHRvIG1haW50YWluIHN0YXRlIGJldHdlZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBjYWxsYmFjay4gVHlwaWNhbGx5LCBDU1JGLCBYU1JGIG1pdGlnYXRpb24gaXMgZG9uZSBieSBjcnlwdG9ncmFwaGljYWxseSBiaW5kaW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB3aXRoIGEgYnJvd3NlciBjb29raWUuXHJcbiAgICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIHByZXNlcnZlcyBzb21lIHN0YXRlIG9iamVjdCBzZXQgYnkgdGhlIGNsaWVudCBpbiB0aGUgQXV0aGVudGljYXRpb24gcmVxdWVzdCBhbmQgbWFrZXMgaXQgYXZhaWxhYmxlIHRvIHRoZSBjbGllbnQgaW4gdGhlIHJlc3BvbnNlLlxyXG4gICAgICogICAgSXTigJlzIHRoYXQgdW5pcXVlIGFuZCBub24tZ3Vlc3NhYmxlIHZhbHVlIHRoYXQgYWxsb3dzIHlvdSB0byBwcmV2ZW50IHRoZSBhdHRhY2sgYnkgY29uZmlybWluZyBpZiB0aGUgdmFsdWUgY29taW5nIGZyb20gdGhlIHJlc3BvbnNlIG1hdGNoZXMgdGhlIG9uZSB5b3UgZXhwZWN0ICh0aGUgb25lIHlvdSBnZW5lcmF0ZWQgd2hlbiBpbml0aWF0aW5nIHRoZSByZXF1ZXN0KS5cclxuICAgICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgc28geW91IGNhbiBlbmNvZGUgYW55IG90aGVyIGluZm9ybWF0aW9uIGluIGl0LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub25jZV1cclxuICAgICAqICAgIFN0cmluZyB2YWx1ZSB1c2VkIHRvIGFzc29jaWF0ZSBhIENsaWVudCBzZXNzaW9uIHdpdGggYW4gSUQgVG9rZW4sIGFuZCB0byBtaXRpZ2F0ZSByZXBsYXkgYXR0YWNrcy5cclxuICAgICAqICAgIFRoZSB2YWx1ZSBpcyBwYXNzZWQgdGhyb3VnaCB1bm1vZGlmaWVkIGZyb20gdGhlIEF1dGhlbnRpY2F0aW9uIFJlcXVlc3QgdG8gdGhlIElEIFRva2VuLlxyXG4gICAgICogICAgU3VmZmljaWVudCBlbnRyb3B5IE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgbm9uY2UgdmFsdWVzIHVzZWQgdG8gcHJldmVudCBhdHRhY2tlcnMgZnJvbSBndWVzc2luZyB2YWx1ZXMuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlVHlwZT0nY29kZSddIE9wZW5JZCByZXNwb25zZSB0eXBlLiBUaGUgZGVmYXVsdCBpcyBgY29kZWAgKENvZGUgRmxvdywgaW52b2x2aW5nIHRoZSBmcm9udC1jaGFubmVsIGFuZCBiYWNrY2hhbm5lbCkuXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAqIEBtZW1iZXJvZiBDeWJlcnVzS2V5QVBJXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYXZpZ2F0ZUF1dGhlbnRpY2F0aW9uKGNsaWVudElkOiBzdHJpbmcsIHJlZGlyZWN0VXJpOiBzdHJpbmcsIHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlciwgbmF2aWdhdG9yOiBOYXZpZ2F0b3IsIHNlc3Npb246IHN0cmluZywgb3JpZ2luPzogc3RyaW5nLCBzdGF0ZT86IHN0cmluZywgbm9uY2U/OiBzdHJpbmcsIHJlc3BvbnNlVHlwZSA9ICdjb2RlJykge1xyXG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZVVybCA9IHRoaXMuZ2V0QXV0aGVudGljYXRpb25FbmRwb2ludFVybChzZXNzaW9uLCBzY29wZSwgY2xpZW50SWQsIHJlZGlyZWN0VXJpLCBzdGF0ZSwgbm9uY2UsIHJlc3BvbnNlVHlwZSk7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImF1dGhfYWN0aXZlXCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm5hdmlnYXRlKGF1dGhlbnRpY2F0ZVVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGxvZ2luVGhyb3VnaEN5YmVydXNLZXlEYXNoYm9hcmQob3B0aW9uczogTG9naW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgZGF0YTogYW55ID0ge1xyXG4gICAgICAgICAgICBjbGllbnRfaWQ6IG9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogb3B0aW9ucy5yZWRpcmVjdFVyaSxcclxuICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsXHJcbiAgICAgICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxyXG4gICAgICAgICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcclxuICAgICAgICAgICAgZGlzcGxheTogb3B0aW9ucy5kaXNwbGF5IHx8ICdwYWdlJyxcclxuICAgICAgICAgICAgcHJvbXB0OiBvcHRpb25zLnByb21wdCxcclxuICAgICAgICAgICAgdGhlbWU6IG9wdGlvbnMudGhlbWUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhdGUpIHtcclxuICAgICAgICAgICAgZGF0YVsnc3RhdGUnXSA9IG9wdGlvbnMuc3RhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5ub25jZSkge1xyXG4gICAgICAgICAgICBkYXRhWydub25jZSddID0gb3B0aW9ucy5ub25jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodGhpcy5fZ2V0VXJsKCdhdXRoZW50aWNhdGUnKSk7XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKHBhcmFtZXRlck5hbWUpID0+IHtcclxuICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQocGFyYW1ldGVyTmFtZSwgZGF0YVtwYXJhbWV0ZXJOYW1lXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IG9wdGlvbnMubmF2aWdhdG9yLm5hdmlnYXRlKHVybC5ocmVmKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRVcmwocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gKG5ldyBVUkwocGF0aCwgdGhpcy5fYXBpVXJsKSkuaHJlZjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRVcmxFbmNvZGVkQm9keShkYXRhOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhkYXRhKS5yZWR1Y2U8c3RyaW5nW10+KChyZXN1bHQ6IHN0cmluZ1tdLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkS2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChkYXRhW2tleV0pO1xyXG5cclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYCR7ZW5jb2RlZEtleX09JHtlbmNvZGVkVmFsdWV9YCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sIFtdKS5qb2luKFwiJlwiKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3RpbWVvdXQobXM6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJlbnVtIEVycm9yQ29kZSB7XHJcbiAgdW5kZWZpbmVkID0gMSxcclxuICB1bmtub3duX2Vycm9yLFxyXG4gIHNlcnZlcl9lcnJvcixcclxuICB3cm9uZ19qc29uLFxyXG4gIG9wZW5hcGlfZXJyb3IsXHJcbiAgcmVzb3VyY2Vfbm90X2ZvdW5kLFxyXG4gIG90cF9nZW5lcmF0aW9uX2ZhaWx1cmUsXHJcbiAgaW52YWxpZF9yZWRpcmVjdF91cmksXHJcbiAgaW52YWxpZF9jbGllbnQsXHJcbiAgdG9vX21hbnlfY2FsbHNfZXJyb3JcclxufVxyXG5cclxuY2xhc3MgQ3liZXJ1c0tleUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIHByaXZhdGUgX2NvZGU6IEVycm9yQ29kZTtcclxuXHJcbiAgY29uc3RydWN0b3IoY29kZToga2V5b2YgdHlwZW9mIEVycm9yQ29kZSwgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihtZXNzYWdlKVxyXG4gICAgdGhpcy5fY29kZSA9IEVycm9yQ29kZVtjb2RlXTtcclxuICB9XHJcblxyXG4gIGdldCBjb2RlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gRXJyb3JDb2RlW3RoaXMuX2NvZGVdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgVW5rbm93bkVycm9yIGV4dGVuZHMgQ3liZXJ1c0tleUVycm9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb2RlOiBrZXlvZiB0eXBlb2YgRXJyb3JDb2RlID0gJ3Vua25vd25fZXJyb3InLCBtZXNzYWdlOiBzdHJpbmcgPSAnVW5rbm93biBlcnJvciBvY2N1cmVkLicpIHtcclxuICAgIHN1cGVyKGNvZGUsIG1lc3NhZ2UpXHJcbiAgfVxyXG59XHJcbmNsYXNzIFRvb01hbnlDYWxsc0Vycm9yIGV4dGVuZHMgQ3liZXJ1c0tleUVycm9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb2RlOiBrZXlvZiB0eXBlb2YgRXJyb3JDb2RlID0gJ3Rvb19tYW55X2NhbGxzX2Vycm9yJywgbWVzc2FnZTogc3RyaW5nID0gJ1lvdVxcJ3ZlIGRvbmUgdG9vIG1hbnkgY2FsbHMuJykge1xyXG4gICAgc3VwZXIoY29kZSwgbWVzc2FnZSlcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE1pc3NpbmdSZWRpcmVjdFVyaSBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcignaW52YWxpZF9yZWRpcmVjdF91cmknLCAnTWlzc2luZyByZWRpcmVjdGlvbiBVUkkuJyk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBXcm9uZ0pzb25FcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7IH1cclxuY2xhc3MgT3BlbkFwaUVycm9yIGV4dGVuZHMgQ3liZXJ1c0tleUVycm9yIHsgfVxyXG5jbGFzcyBSZXNvdXJjZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XHJcbmNsYXNzIE9UUEdlbmVyYXRpb25FcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7IH1cclxuY2xhc3MgSW52YWxpZFJlZGlyZWN0VXJpRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XHJcbmNsYXNzIEludmFsaWRDbGllbnRFcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7IH1cclxuXHJcbmNvbnN0IE1BUFBJTkcgPSB7XHJcbiAgW0Vycm9yQ29kZS51bmRlZmluZWRdOiBVbmtub3duRXJyb3IsXHJcbiAgW0Vycm9yQ29kZS51bmtub3duX2Vycm9yXTogVW5rbm93bkVycm9yLFxyXG4gIFtFcnJvckNvZGUuc2VydmVyX2Vycm9yXTogVW5rbm93bkVycm9yLFxyXG4gIFtFcnJvckNvZGUudW5kZWZpbmVkXTogV3JvbmdKc29uRXJyb3IsXHJcbiAgW0Vycm9yQ29kZS53cm9uZ19qc29uXTogV3JvbmdKc29uRXJyb3IsXHJcbiAgW0Vycm9yQ29kZS5vcGVuYXBpX2Vycm9yXTogT3BlbkFwaUVycm9yLFxyXG4gIFtFcnJvckNvZGUucmVzb3VyY2Vfbm90X2ZvdW5kXTogUmVzb3VyY2VOb3RGb3VuZEVycm9yLFxyXG4gIFtFcnJvckNvZGUub3RwX2dlbmVyYXRpb25fZmFpbHVyZV06IE9UUEdlbmVyYXRpb25FcnJvcixcclxuICBbRXJyb3JDb2RlLmludmFsaWRfcmVkaXJlY3RfdXJpXTogSW52YWxpZFJlZGlyZWN0VXJpRXJyb3IsXHJcbiAgW0Vycm9yQ29kZS5pbnZhbGlkX2NsaWVudF06IEludmFsaWRDbGllbnRFcnJvcixcclxuICBbRXJyb3JDb2RlLnRvb19tYW55X2NhbGxzX2Vycm9yXTogVG9vTWFueUNhbGxzRXJyb3JcclxufVxyXG5cclxuZnVuY3Rpb24gZXJyb3JGYWN0b3J5KGNvZGU6IGtleW9mIHR5cGVvZiBFcnJvckNvZGUsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gIGNvbnN0IGVudW1fdHlwZSA9IEVycm9yQ29kZVtjb2RlXTtcclxuICBjb25zdCBFcnJvckNvbnN0cnVjdG9yID0gTUFQUElOR1tlbnVtX3R5cGVdO1xyXG5cclxuICByZXR1cm4gbmV3IEVycm9yQ29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgZXJyb3JGYWN0b3J5LFxyXG4gIEVycm9yQ29kZSxcclxuICBDeWJlcnVzS2V5RXJyb3IsXHJcbiAgVW5rbm93bkVycm9yLFxyXG4gIFRvb01hbnlDYWxsc0Vycm9yLFxyXG4gIFdyb25nSnNvbkVycm9yLFxyXG4gIE9wZW5BcGlFcnJvcixcclxuICBSZXNvdXJjZU5vdEZvdW5kRXJyb3IsXHJcbiAgT1RQR2VuZXJhdGlvbkVycm9yLFxyXG4gIE1pc3NpbmdSZWRpcmVjdFVyaVxyXG59O1xyXG5cclxuIiwiLyoqXHJcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBhIHRha2VuIGdlb2xvY2F0aW9uIG1lYXN1cmVtZW50LlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBHZW9sb2NhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdlb2xvY2F0aW9uIHtcclxuICBwcml2YXRlIF9sYXRpdHVkZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2xvbmdpdHVkZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2FjY3VyYWN5OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyLCBhY2N1cmFjeT86IG51bWJlcikge1xyXG4gICAgdGhpcy5fbGF0aXR1ZGUgPSBsYXRpdHVkZTtcclxuICAgIHRoaXMuX2xvbmdpdHVkZSA9IGxvbmdpdHVkZTtcclxuICAgIHRoaXMuX2FjY3VyYWN5ID0gYWNjdXJhY3k7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBsYXRpdHVkZS5cclxuICAgKlxyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICogQG1lbWJlcm9mIEdlb2xvY2F0aW9uXHJcbiAgICovXHJcbiAgZ2V0IGxhdGl0dWRlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGF0aXR1ZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGEgbG9uZ2l0dWRlLlxyXG4gICAqXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKiBAbWVtYmVyb2YgR2VvbG9jYXRpb25cclxuICAgKi9cclxuICBnZXQgbG9uZ2l0dWRlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbG9uZ2l0dWRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhbiBhY2N1cmFjeSBvZiBhIG1lYXN1cmVtZW50LlxyXG4gICAqXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKiBAbWVtYmVyb2YgR2VvbG9jYXRpb25cclxuICAgKi9cclxuICBnZXQgYWNjdXJhY3koKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9hY2N1cmFjeTtcclxuICB9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL3Nkay9hcGknO1xyXG5leHBvcnQgKiBmcm9tICcuL3Nkay9lcnJvcnMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3Nkay9uYXZpZ2F0b3IvbmF2aWdhdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZGsvbmF2aWdhdG9yL3JlZGlyZWN0TmF2aWdhdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZGsvc2NvcGVQYXJzZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL3Nkay9zZXNzaW9uJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZGsvZ2VvUHJvdmlkZXIvZ2VvJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZGsvZ2VvUHJvdmlkZXIvZ2VvUHJvdmlkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL3Nkay9nZW9Qcm92aWRlci9odG1sNUdlb1Byb3ZpZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZGsvbG9naW5PcHRpb25zJztcclxuXHJcbmltcG9ydCB7IEN5YmVydXNLZXlBUEkgfSBmcm9tICcuL3Nkay9hcGknO1xyXG5leHBvcnQgZGVmYXVsdCBDeWJlcnVzS2V5QVBJOyIsImltcG9ydCB7IE1pc3NpbmdSZWRpcmVjdFVyaSB9IGZyb20gJy4uL2Vycm9ycyc7XHJcbmltcG9ydCB7IE5hdmlnYXRvciB9IGZyb20gJy4vbmF2aWdhdG9yJztcclxuXHJcblxyXG4vKipcclxuICogQ2xhc3MgZGVzY3JpYmVzIGhvdyBPcGVuSUQncyBBdXRoZW50aWNhdGlvbiBFbmRwb2ludCB3aWxsIGJlIGhhbmRsZWQuXHJcbiAqIFRoaXMgY2xhc3MgaXMgdGhpZ2h0ZW4gdG8gYSBkZWZhdWx0IGJyb3dzZXIgYmVoYXZpb3VyIGZvciBPcGVuSUQgcHJvdG9jb2wgLSBhIHJlZGlyZWN0aW9uLlxyXG4gKiBXaGljaCBtZWFucyB0aGF0IHlvdXIgVVJMIHdpbGwgYmUgdGVtcG9yYXJpbHkgcmVwbGFjZWQgYnkgdGhlIEF1dGhlbnRpY2F0aW9uIEVuZHBvaW50XHJcbiAqIGFuZCByZXBsYWNlZCBhZ2FpbiBieSBpdHMgcmVzcG9uc2UgLSBIVFRQIDMwMi4gVGhlIG5ldyBsb2NhdGlvbiB3aWxsIGJlIHRoZSBvbmUgeW91IGRlZmluZWQgYXMgeW91ciBgcmVkaXJlY3RfdXJpYC5cclxuICogXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIFJlZGlyZWN0TmF2aWdhdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtOYXZpZ2F0b3J9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVkaXJlY3ROYXZpZ2F0b3IgaW1wbGVtZW50cyBOYXZpZ2F0b3Ige1xyXG4gIC8qKlxyXG4gICAqIE5hdmlnYXRlcyB0byB0aGUgZ2l2ZW4gVVJMLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBBdXRoZW50aWNhdGlvbiBFbmRwb2ludCBVUkwuXHJcbiAgICogQHRocm93cyBNaXNzaW5nUmVkaXJlY3RVcmlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKiBAbWVtYmVyb2YgUmVkaXJlY3ROYXZpZ2F0b3JcclxuICAgKi9cclxuICBhc3luYyBuYXZpZ2F0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgaWYgKCF1cmwpIHtcclxuICAgICAgdGhyb3cgbmV3IE1pc3NpbmdSZWRpcmVjdFVyaSgpXHJcbiAgICB9XHJcblxyXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gIH1cclxufSIsIlxyXG4vKipcclxuICogSGFuZHkgY2xhc3MgdG8gZGVmaW5lIGFuIE9wZW5JRCdzIHNjb3BlLlxyXG4gKiBTY29wZXMgYXJlIHVzZWQgYnkgYW4gYXBwbGljYXRpb24gZHVyaW5nIGF1dGhlbnRpY2F0aW9uIHRvIGF1dGhvcml6ZSBhY2Nlc3MgdG8gYSB1c2VyJ3MgZGV0YWlscyxcclxuICogbGlrZSBuYW1lIGFuZCBwaWN0dXJlLiBFYWNoIHNjb3BlIHJldHVybnMgYSBzZXQgb2YgdXNlciBhdHRyaWJ1dGVzLCB3aGljaCBhcmUgY2FsbGVkIGNsYWltcy4gXHJcbiAqIFxyXG4gKiBZb3UgY2FuIHVzZSBhZGRpdGlvbmFsIHZhbHVlcyBgZW1haWxgIChhZGQgYSB1c2VyJ3MgZW1haWwgY2xhaW0pIGFuZCBgcHJvZmlsZWAgKGFkZCB1c2VyIGZpcnN0IGFuZCBsYXN0IG5hbWUpLlxyXG4gKiBcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiBjb25zdCBzY29wZVBhcnNlciA9IG5ldyBPcGVuSWRTY29wZVBhcnNlcigpO1xyXG4gKiBjb25zdCBzY29wZSA9IHNjb3BlUGFyc2VyLmFkZEVtYWlsKCkuYWRkUHJvZmlsZSgpLmdldFZhbHVlKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBPcGVuSWRTY29wZVBhcnNlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE9wZW5JZFNjb3BlUGFyc2VyIHtcclxuICBwcml2YXRlIF9zY29wZTogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9zY29wZSA9IFsnb3BlbmlkJ107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGBlbWFpbGAgc2NvcGUuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgKiBAbWVtYmVyb2YgT3BlbklkU2NvcGVQYXJzZXJcclxuICAgKi9cclxuICBwdWJsaWMgYWRkRW1haWwoKTogdGhpcyB7XHJcbiAgICBpZiAodGhpcy5fc2NvcGUuaW5jbHVkZXMoJ2VtYWlsJykpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2NvcGUucHVzaCgnZW1haWwnKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYHByb2ZpbGVgIHNjb3BlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3RoaXN9XHJcbiAgICogQG1lbWJlcm9mIE9wZW5JZFNjb3BlUGFyc2VyXHJcbiAgICovXHJcbiAgcHVibGljIGFkZFByb2ZpbGUoKTogdGhpcyB7XHJcbiAgICBpZiAodGhpcy5fc2NvcGUuaW5jbHVkZXMoJ3Byb2ZpbGUnKSkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zY29wZS5wdXNoKCdwcm9maWxlJyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGZvcm1hdHRlZCBzY29wZSB2YWx1ZSwgZS5nLiBgb3BlbmlkIGVtYWlsYC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICogQG1lbWJlcm9mIE9wZW5JZFNjb3BlUGFyc2VyXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2NvcGUuam9pbignICcpO1xyXG4gIH1cclxufSIsImV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvblJlc3BvbnNlIHtcclxuICBzZXNzaW9uX2lkOiBzdHJpbmc7XHJcbiAgY3JlYXRlZF9hdDogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERhdGEgY2xhc3MgcmVwcmVzZW50aW5nIGEgQ3liZXJ1cyBLZXkgc2Vzc2lvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgU2Vzc2lvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlc3Npb24ge1xyXG4gIC8qKlxyXG4gICAqIFNlc3Npb24ncyB1bmlxdWUgaWRlbnRpZmllci4gSXQncyB2YWxpZCB1cCB0byAyMHMuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBTZXNzaW9uXHJcbiAgICovXHJcbiAgcHVibGljIHNlc3Npb25JZDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBIFVUQyBkYXRlIHJlcHJlc2VudGluZyBhIGRhdGUgKGFuZCB0aW1lKSB3aGVuIGEgc2Vzc2lvbiBoYXMgYmVlbiBjcmVhdGVkLlxyXG4gICAqXHJcbiAgICogQHR5cGUge0RhdGV9XHJcbiAgICogQG1lbWJlcm9mIFNlc3Npb25cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlZEF0OiBEYXRlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihqc29uOiBTZXNzaW9uUmVzcG9uc2UpIHtcclxuICAgIHRoaXMuc2Vzc2lvbklkID0ganNvbi5zZXNzaW9uX2lkO1xyXG4gICAgdGhpcy5jcmVhdGVkQXQgPSBuZXcgRGF0ZShqc29uLmNyZWF0ZWRfYXQpO1xyXG4gIH1cclxufSIsImltcG9ydCB7IEdlb2xvY2F0aW9uIH0gZnJvbSAnLi9nZW8nO1xyXG5pbXBvcnQgeyBHZW9Qcm92aWRlciB9IGZyb20gJy4vZ2VvUHJvdmlkZXInO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBwcm92aWRlcyBhIGdlb2xvY2FsaXphdGlvbiBtZWFzdXJlbWVudC5cclxuICogSXQgdXNlcyBhIEhUTUw1J3MgYEdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigpYCBtZXRob2QuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIEhUTUw1R2VvUHJvdmlkZXJcclxuICogQGltcGxlbWVudHMge0dlb1Byb3ZpZGVyfVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEhUTUw1R2VvUHJvdmlkZXIgaW1wbGVtZW50cyBHZW9Qcm92aWRlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfZW5hYmxlSGlnaEFjY3VyYWN5OiBib29sZWFuO1xyXG4gIHByaXZhdGUgX25hdmlnYXRvcjogTmF2aWdhdG9yO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX251bU9mVHJpZXNCZWZvcmVHcHNBY3RpdmF0ZXM6IG51bWJlciA9IDI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfb25QZXJtaXNzaW9uRGlhbG9nPzogRnVuY3Rpb247XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0TWVzc2FnZSA9IFwiQ3liZXJ1cyBLZXkgd2lkZ2V0IHdvdWxkIGxpa2UgdG8gYWNjZXNzIHlvdXIgbG9jYXRpb25cIiArXHJcbiAgICAgIFwiIHRvIHVzZSBnZW9sb2NhdGlvbiB0cmFja2luZyB0byBhc3NlcnQgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbi5cIlxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgSFRNTDVHZW9Qcm92aWRlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2VuYWJsZUhpZ2hBY2N1cmFjeT1mYWxzZV0gIEZvcmNlcyBoaWdoIGFjY3VyYWN5IG9mIHRoZSBnZW9sb2NhdGlvbi4gSXQgbWF5IHRha2UgbG9uZ2VyLlxyXG4gICAqIEBwYXJhbSB7TmF2aWdhdG9yfSBbbmF2aWdhdG9yPXdpbmRvdy5uYXZpZ2F0b3JdXHJcbiAgICogQHBhcmFtIG51bU9mVHJpZXNCZWZvcmVHcHNBY3RpdmF0ZXMgVGhlIEdQUyBsb2NhbGl6YXRpb24gd2lsbCBiZSB1c2VkIG9ubHkgYWZ0ZXIgbiB1bnN1Y2Nlc3NmdWwgdHJpZXMuXHJcbiAgICogQnkgdW5zdWNjZXNzZnVsIHRyeSB3ZSBkZWZpbmUgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgYXV0aGVudGljYXRpb24gcmVzdWx0ZWQgaW4gc2Vzc2lvbiBub3QgZm91bmQgZXJyb3IuXHJcbiAgICogQHBhcmFtIG9uUGVybWlzc2lvbkRpYWxvZyBMZWF2ZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBkaWFsb2cgdG8gYXBwZWFyIGJlZm9yZSBzaXRlXHJcbiAgICogYXNrcyBmb3IgbG9jYWxpemF0aW9uIHBlcm1pc3Npb24gZm9yIHRoZSBjYWxsZXIgdG8gaGFuZGxlLiBJdCB0YWtlcyBhIGZ1bmN0aW9uIHdpdGggZGVmYXVsdCBtZXNzYWdlIGFzIHBhcmFtZXRlclxyXG4gICAqIEBtZW1iZXJvZiBIVE1MNUdlb1Byb3ZpZGVyXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZW5hYmxlSGlnaEFjY3VyYWN5ID0gZmFsc2UsIG9uUGVybWlzc2lvbkRpYWxvZzpGdW5jdGlvbiA9IG51bGwsIG51bU9mVHJpZXNCZWZvcmVHcHNBY3RpdmF0ZXM6IG51bWJlciA9IDIsIG5hdmlnYXRvcjogTmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcikge1xyXG4gICAgdGhpcy5fZW5hYmxlSGlnaEFjY3VyYWN5ID0gZW5hYmxlSGlnaEFjY3VyYWN5O1xyXG4gICAgdGhpcy5fbmF2aWdhdG9yID0gbmF2aWdhdG9yO1xyXG4gICAgdGhpcy5fbnVtT2ZUcmllc0JlZm9yZUdwc0FjdGl2YXRlcyA9IG51bU9mVHJpZXNCZWZvcmVHcHNBY3RpdmF0ZXM7XHJcbiAgICB0aGlzLl9vblBlcm1pc3Npb25EaWFsb2cgPSBvblBlcm1pc3Npb25EaWFsb2c7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIGdlb2xvY2FsaXphdGlvbiBtZWFzdXJlbWVudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEdlb2xvY2F0aW9uPn0gR2VvbG9jYWxpemF0aW9uIG1lYXN1cmVtZW50LlxyXG4gICAqIEBtZW1iZXJvZiBIVE1MNUdlb1Byb3ZpZGVyXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0R2VvKCk6IFByb21pc2U8R2VvbG9jYXRpb24+IHtcclxuICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuXHJcblxyXG4gICAgbGV0IGRhdGEgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYXV0aF9jb3VudGVyXCIpO1xyXG4gICAgaWYgKGRhdGEgPT1udWxsKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBsZXQgdmFsdWUgPSBwYXJzZUludChkYXRhLCAxMClcclxuXHJcbiAgICBpZihpc05hTih2YWx1ZSkgfHwgdmFsdWUgPCB0aGlzLl9udW1PZlRyaWVzQmVmb3JlR3BzQWN0aXZhdGVzKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwZXJtaXNzaW9uRGlhbG9nID0gdGhpcy5fb25QZXJtaXNzaW9uRGlhbG9nO1xyXG4gICAgICBjb25zdCBkZWZhdWx0TWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2U7XHJcblxyXG4gICAgICBuYXZpZ2F0b3IucGVybWlzc2lvbnMgJiYgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHtuYW1lOiAnZ2VvbG9jYXRpb24nfSlcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKFBlcm1pc3Npb25TdGF0dXMpIHtcclxuICAgICAgICAgICAgaWYgKFBlcm1pc3Npb25TdGF0dXMuc3RhdGUgPT0gJ3Byb21wdCcpIHtcclxuICAgICAgICAgICAgICBpZihwZXJtaXNzaW9uRGlhbG9nKVxyXG4gICAgICAgICAgICAgICAgcGVybWlzc2lvbkRpYWxvZyhkZWZhdWx0TWVzc2FnZSlcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBhbGVydChkZWZhdWx0TWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZ2V0R2VvKHRoaXMuX2VuYWJsZUhpZ2hBY2N1cmFjeSk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgLy8gRS5nLiB1c2VyIGRpZG4ndCBhZ3JlZSBvbiBnZW9saWNhbGl6YXRpb24uXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgY29vcmRzIH0gPSByZXN1bHQ7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBHZW9sb2NhdGlvbihjb29yZHMubGF0aXR1ZGUsIGNvb3Jkcy5sb25naXR1ZGUsIGNvb3Jkcy5hY2N1cmFjeSk7XHJcbiAgfVxyXG5cclxuICBfZ2V0R2VvKGVuYWJsZUhpZ2hBY2N1cmFjeTogYm9vbGVhbik6IFByb21pc2U8UG9zaXRpb24+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuX25hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocmVzb2x2ZSwgcmVqZWN0LCB7IGVuYWJsZUhpZ2hBY2N1cmFjeSB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5hdmlnYXRvciB9IGZyb20gJy4vbmF2aWdhdG9yL25hdmlnYXRvcic7XHJcbmltcG9ydCB7IE9wZW5JZFNjb3BlUGFyc2VyIH0gZnJvbSAnLi9zY29wZVBhcnNlcic7XHJcblxyXG5cclxuLyoqXHJcbiAqIExvZ2luIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIExvZ2luT3B0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExvZ2luT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIFB1YmxpYyBjbGllbnQgSUQgZ2VuZXJhdGVkIGR1cmluZyBjcmVhdGluZyB0aGUgYWNjb3VudC5cclxuICAgKlxyXG4gICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWRpcmVjdFVyaSBSZWRpcmVjdCBVUkkgdG8gd2hpY2ggdGhlIHJlc3BvbnNlIHdpbGwgYmUgc2VudC4gSWYgdGhlIHZhbHVlIGlzIG5vdCB3aGl0ZWxpc3RlZCB0aGVuIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cclxuICAgKlxyXG4gICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xyXG4gICAqL1xyXG4gIHJlYWRvbmx5IHJlZGlyZWN0VXJpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T3BlbklkU2NvcGVQYXJzZXJ9IHNjb3BlIEVhY2ggc2NvcGUgcmV0dXJucyBhIHNldCBvZiB1c2VyIGF0dHJpYnV0ZXMsIHdoaWNoIGFyZSBjYWxsZWQgY2xhaW1zLlxyXG4gICAqICAgIE9uY2UgdGhlIHVzZXIgYXV0aG9yaXplcyB0aGUgcmVxdWVzdGVkIHNjb3BlcywgdGhlIGNsYWltcyBhcmUgcmV0dXJuZWQgaW4gYW4gSUQgVG9rZW4uXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcclxuICAgKi9cclxuICByZWFkb25seSBzY29wZTogT3BlbklkU2NvcGVQYXJzZXI7XHJcblxyXG4gIC8qKlxyXG4gICogQHBhcmFtIHtOYXZpZ2F0b3J9IG5hdmlnYXRvciBDbGFzcyBkZXNjcmliZXMgYW4gYWN0aW9uIHRoYXQgd2lsbCBiZSBkb25lIHRvIEF1dGhlbnRpY2F0aW9uIFVSTC4gRm9yIGJyb3dzZXJzIGl0IHdpbGwgYmUgYSBwYWdlIHJlZGlyZWN0aW9uLlxyXG4gICAqXHJcbiAgICogQHR5cGUge3N0cmluZ31cclxuICAgKiBAbWVtYmVyb2YgTG9naW5PcHRpb25zXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgbmF2aWdhdG9yOiBOYXZpZ2F0b3I7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luXSBUaGUgb3JpZ2luIGRvbWFpbiBvZiB0aGUgcmVxdWVzdCBiZWluZyBtYWRlLiBJZiBgbnVsbGAgdGhlbiB0aGUgUmVmZXJlciBoZWFkZXIgd2lsbCBiZSB1c2VkLlxyXG4gICAqXHJcbiAgICogQHR5cGUge3N0cmluZ31cclxuICAgKiBAbWVtYmVyb2YgTG9naW5PcHRpb25zXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgb3JpZ2luOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RhdGVdXHJcbiAgICogICAgUkVDT01NRU5ERUQuIE9wYXF1ZSB2YWx1ZSB1c2VkIHRvIG1haW50YWluIHN0YXRlIGJldHdlZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBjYWxsYmFjay4gVHlwaWNhbGx5LCBDU1JGLCBYU1JGIG1pdGlnYXRpb24gaXMgZG9uZSBieSBjcnlwdG9ncmFwaGljYWxseSBiaW5kaW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB3aXRoIGEgYnJvd3NlciBjb29raWUuXHJcbiAgICogICAgVGhlIHN0YXRlIHBhcmFtZXRlciBwcmVzZXJ2ZXMgc29tZSBzdGF0ZSBvYmplY3Qgc2V0IGJ5IHRoZSBjbGllbnQgaW4gdGhlIEF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgYW5kIG1ha2VzIGl0IGF2YWlsYWJsZSB0byB0aGUgY2xpZW50IGluIHRoZSByZXNwb25zZS5cclxuICAgKiAgICBJdOKAmXMgdGhhdCB1bmlxdWUgYW5kIG5vbi1ndWVzc2FibGUgdmFsdWUgdGhhdCBhbGxvd3MgeW91IHRvIHByZXZlbnQgdGhlIGF0dGFjayBieSBjb25maXJtaW5nIGlmIHRoZSB2YWx1ZSBjb21pbmcgZnJvbSB0aGUgcmVzcG9uc2UgbWF0Y2hlcyB0aGUgb25lIHlvdSBleHBlY3QgKHRoZSBvbmUgeW91IGdlbmVyYXRlZCB3aGVuIGluaXRpYXRpbmcgdGhlIHJlcXVlc3QpLlxyXG4gICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgc28geW91IGNhbiBlbmNvZGUgYW55IG90aGVyIGluZm9ybWF0aW9uIGluIGl0LlxyXG4gICAqXHJcbiAgICogQHR5cGUge3N0cmluZ31cclxuICAgKiBAbWVtYmVyb2YgTG9naW5PcHRpb25zXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgc3RhdGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtub25jZV1cclxuICAgKiAgICBTdHJpbmcgdmFsdWUgdXNlZCB0byBhc3NvY2lhdGUgYSBDbGllbnQgc2Vzc2lvbiB3aXRoIGFuIElEIFRva2VuLCBhbmQgdG8gbWl0aWdhdGUgcmVwbGF5IGF0dGFja3MuXHJcbiAgICogICAgVGhlIHZhbHVlIGlzIHBhc3NlZCB0aHJvdWdoIHVubW9kaWZpZWQgZnJvbSB0aGUgQXV0aGVudGljYXRpb24gUmVxdWVzdCB0byB0aGUgSUQgVG9rZW4uXHJcbiAgICogICAgU3VmZmljaWVudCBlbnRyb3B5IE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgbm9uY2UgdmFsdWVzIHVzZWQgdG8gcHJldmVudCBhdHRhY2tlcnMgZnJvbSBndWVzc2luZyB2YWx1ZXMuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcclxuICAgKi9cclxuICByZWFkb25seSBub25jZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlVHlwZT0nY29kZSddIE9wZW5JZCByZXNwb25zZSB0eXBlLiBUaGUgZGVmYXVsdCBpcyBgY29kZWAgKENvZGUgRmxvdywgaW52b2x2aW5nIHRoZSBmcm9udC1jaGFubmVsIGFuZCBiYWNrY2hhbm5lbCkuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcclxuICAgKi9cclxuICByZWFkb25seSByZXNwb25zZVR5cGU6IHN0cmluZyA9ICdjb2RlJztcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpc3BsYXkgSXQgc3BlY2lmaWVzIGhvdyB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgZGlzcGxheXMgdGhlIGF1dGhlbnRpY2F0aW9uIGFuZCBjb25zZW50IHVzZXIgaW50ZXJmYWNlIHBhZ2VzIHRvIHRoZSBFbmQtVXNlci5cclxuICAgKiAgIERlZmF1bHQgYW5kIHRoZSBvbmx5IHN1cHBvcnRlZCB2YWx1ZSBpcyBgcGFnZWAuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcclxuICAgKi9cclxuICByZWFkb25seSBkaXNwbGF5OiBzdHJpbmcgPSAncGFnZSdcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb21wdCBTcGFjZSBkZWxpbWl0ZWQsIGNhc2Ugc2Vuc2l0aXZlIGxpc3Qgb2Ygc3RyaW5nIHZhbHVlcyB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBBdXRob3JpemF0aW9uIFNlcnZlclxyXG4gICAqICAgcHJvbXB0cyB0aGUgRW5kLVVzZXIgZm9yIHJlYXV0aGVudGljYXRpb24gYW5kIGNvbnNlbnQuIFRoZSBkZWZpbmVkIHZhbHVlcyBhcmU6IGBsb2dpbmAsIGBub25lYC5cclxuICAgKiAgIERlZmF1bHQgaXMgYGxvZ2luLG5vbmVgLiBDYW4ndCBiZSBjaGFuZ2VkIGZvciBub3cuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcclxuICAgKi9cclxuICByZWFkb25seSBwcm9tcHQ6IHN0cmluZyA9ICdsb2dpbixub25lJ1xyXG5cclxuICAvKipcclxuICAgKiBUaGVtZSBvZiB0aGUgbG9naW4gcGFnZSBvZiBDeWJlcnVzIEtleSBEYXNoYm9hcmQuIERlZmF1bHQgaXMgYGRlZmF1bHRgLlxyXG4gICAqXHJcbiAgICogQHR5cGUge3N0cmluZ31cclxuICAgKiBAbWVtYmVyb2YgTG9naW5PcHRpb25zXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgdGhlbWU6IHN0cmluZyA9ICdkZWZhdWx0JztcclxufSJdLCJzb3VyY2VSb290IjoiIn0=