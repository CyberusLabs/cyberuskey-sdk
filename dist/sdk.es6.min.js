!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("cyberuskey-sdk",[],t):"object"==typeof exports?exports["cyberuskey-sdk"]=t():e["cyberuskey-sdk"]=t()}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e[void 0]=1]="undefined",e[e.unknown_error=2]="unknown_error",e[e.server_error=3]="server_error",e[e.wrong_json=4]="wrong_json",e[e.openapi_error=5]="openapi_error",e[e.resource_not_found=6]="resource_not_found",e[e.otp_generation_failure=7]="otp_generation_failure",e[e.invalid_redirect_uri=8]="invalid_redirect_uri",e[e.invalid_client=9]="invalid_client",e[e.too_many_calls_error=10]="too_many_calls_error"}(o||(o={})),t.ErrorCode=o;class r extends Error{constructor(e,t){super(t),this._code=o[e]}get code(){return o[this._code]}get description(){return this.message}}t.CyberusKeyError=r;class i extends r{constructor(e="unknown_error",t="Unknown error occured."){super(e,t)}}t.UnknownError=i;class s extends r{constructor(e="too_many_calls_error",t="You've done too many calls."){super(e,t)}}t.TooManyCallsError=s;t.MissingRedirectUri=class extends r{constructor(){super("invalid_redirect_uri","Missing redirection URI.")}};class c extends r{}t.WrongJsonError=c;class u extends r{}t.OpenApiError=u;class a extends r{}t.ResourceNotFoundError=a;class d extends r{}t.OTPGenerationError=d;const l={[o.undefined]:i,[o.unknown_error]:i,[o.server_error]:i,[o.undefined]:c,[o.wrong_json]:c,[o.openapi_error]:u,[o.resource_not_found]:a,[o.otp_generation_failure]:d,[o.invalid_redirect_uri]:class extends r{},[o.invalid_client]:class extends r{},[o.too_many_calls_error]:s};t.errorFactory=function(e,t){const n=o[e];return new(0,l[n])(e,t)}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(2);t.CyberusKeyAPI=class{constructor(e,t,n=600){this._apiUrl=new URL("/api/v2/",e),this._geoProvider=t,this._delayMs=n}createSession(e,t,n){return o(this,void 0,void 0,(function*(){const o={client_id:e};t&&(o.lat=t.latitude,o.lng=t.longitude),n&&(o.origin=n);const s=yield fetch(this._getUrl("sessions"),{method:"POST",body:this._getUrlEncodedBody(o),headers:{"Content-Type":"application/x-www-form-urlencoded"}}),c=yield s.json();if(s.ok&&201===s.status&&c.success)return new i.Session(c.data);if(!c.error)throw new r.UnknownError;throw r.errorFactory(c.error,c.error_description)}))}getOTPSound(e){return o(this,void 0,void 0,(function*(){const t=yield fetch(this._getUrl("sessions/"+e.sessionId),{headers:{Accept:"audio/mpeg","Content-Type":"text/plain"}}),n=t.buffer||t.arrayBuffer;return yield n.call(t)}))}getAuthenticationEndpointUrl(e,t,n,o,r,i,s="code"){const c={session_id:e.sessionId,client_id:n,scope:t.getValue(),redirect_uri:o,response_type:s};r&&(c.state=r),i&&(c.nonce=i);const u=new URL(this._getUrl("authenticate"));return Object.keys(c).forEach(e=>{u.searchParams.append(e,c[e])}),u.href}authenticate(e,t,n,r,i,s,c,u,a="code"){return o(this,void 0,void 0,(function*(){this._geoProvider&&!this._cachedGeo&&(this._cachedGeo=yield this._geoProvider.getGeo());const o=yield this.createSession(e,this._cachedGeo,s),d=yield this.getOTPSound(o),l=this.getAuthenticationEndpointUrl(o,n,e,t,c,u,a);console.info(`Navigating to ${l}.`),yield i.navigate(l),yield this._timeout(1e3),console.info("Sound emitting."),yield r.emit(d)}))}navigateAndGetTheSound(e,t,n,r,i,s,c,u="code"){return o(this,void 0,void 0,(function*(){this._geoProvider&&!this._cachedGeo&&(this._cachedGeo=yield this._geoProvider.getGeo());const o=yield this.createSession(e,this._cachedGeo,i),a=yield this.getOTPSound(o),d=this.getAuthenticationEndpointUrl(o,n,e,t,s,c,u);return console.info(`Navigating to ${d}.`),yield r.navigate(d),yield this._timeout(this._delayMs),a}))}loginThroughCyberusKeyDashboard(e){return o(this,void 0,void 0,(function*(){const t={client_id:e.clientId,scope:e.scope.getValue(),redirect_uri:e.redirectUri,response_type:e.responseType,display:e.display,prompt:e.prompt,theme:e.theme};e.state&&(t.state=e.state),e.nonce&&(t.nonce=e.nonce);const n=new URL(this._getUrl("authorize"));Object.keys(t).forEach(e=>{n.searchParams.append(e,t[e])}),console.info(`Navigating to ${n.href}.`),yield e.navigator.navigate(n.href)}))}_getUrl(e){return new URL(e,this._apiUrl).href}_getUrlEncodedBody(e){return Object.keys(e).reduce((t,n)=>{const o=encodeURIComponent(n),r=encodeURIComponent(e[n]);return t.push(`${o}=${r}`),t},[]).join("&")}_timeout(e){return new Promise(t=>setTimeout(t,e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Session=class{constructor(e){this.sessionId=e.session_id,this.createdAt=new Date(e.created_at)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Geolocation=class{constructor(e,t,n){this._latitude=e,this._longitude=t,this._accuracy=n}get latitude(){return this._latitude}get longitude(){return this._longitude}get accuracy(){return this._accuracy}}},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(1)),o(n(5)),o(n(0)),o(n(6)),o(n(7)),o(n(2)),o(n(3)),o(n(8)),o(n(9));const r=n(1);t.default=r.CyberusKeyAPI},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.WebAudioSoundEmitter=class{emit(e){return o(this,void 0,void 0,(function*(){let t;try{t=new(window.AudioContext||window.webkitAudioContext)}catch(e){throw new r.OTPGenerationError("otp_generation_failure","AudioContext is not supported")}const n=t.createBufferSource();t.decodeAudioData(e,e=>{n.buffer=e,n.connect(t.destination),n.start(0)}),yield new Promise(e=>{n.onended=e})}))}}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.RedirectNavigator=class{navigate(e){return o(this,void 0,void 0,(function*(){if(!e)throw new r.MissingRedirectUri;return window.location.href=e,Promise.resolve()}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.OpenIdScopeParser=class{constructor(){this._scope=["openid"]}addEmail(){return this._scope.includes("email")||this._scope.push("email"),this}addProfile(){return this._scope.includes("profile")||this._scope.push("profile"),this}getValue(){return this._scope.join(" ")}}},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.HTML5GeoProvider=class{constructor(e=!1,t=window.navigator){this._enableHighAccuracy=e,this._navigator=t}getGeo(){return o(this,void 0,void 0,(function*(){let e=null;try{e=yield this._getGeo(this._enableHighAccuracy)}catch(e){return null}const{coords:t}=e;return new r.Geolocation(t.latitude,t.longitude,t.accuracy)}))}_getGeo(e){return new Promise((t,n)=>{console.log("enableHighAccuracy: "+e),this._navigator.geolocation.getCurrentPosition(t,n,{enableHighAccuracy:e})})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LoginOptions=class{constructor(){this.responseType="code",this.display="page",this.prompt="login,none",this.theme="default"}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2Vycm9ycy50cyIsIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay8uL3NyYy9zZGsvYXBpLnRzIiwid2VicGFjazovL2N5YmVydXNrZXktc2RrLy4vc3JjL3Nkay9zZXNzaW9uLnRzIiwid2VicGFjazovL2N5YmVydXNrZXktc2RrLy4vc3JjL3Nkay9nZW9Qcm92aWRlci9nZW8udHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2VtaXR0ZXIvd2ViQXVkaW9Tb3VuZEVtaXR0ZXIudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL25hdmlnYXRvci9yZWRpcmVjdE5hdmlnYXRvci50cyIsIndlYnBhY2s6Ly9jeWJlcnVza2V5LXNkay8uL3NyYy9zZGsvc2NvcGVQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2dlb1Byb3ZpZGVyL2h0bWw1R2VvUHJvdmlkZXIudHMiLCJ3ZWJwYWNrOi8vY3liZXJ1c2tleS1zZGsvLi9zcmMvc2RrL2xvZ2luT3B0aW9ucy50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRXJyb3JDb2RlIiwiQ3liZXJ1c0tleUVycm9yIiwiRXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsInN1cGVyIiwidGhpcyIsIl9jb2RlIiwiVW5rbm93bkVycm9yIiwiVG9vTWFueUNhbGxzRXJyb3IiLCJNaXNzaW5nUmVkaXJlY3RVcmkiLCJXcm9uZ0pzb25FcnJvciIsIk9wZW5BcGlFcnJvciIsIlJlc291cmNlTm90Rm91bmRFcnJvciIsIk9UUEdlbmVyYXRpb25FcnJvciIsIk1BUFBJTkciLCJ1bmRlZmluZWQiLCJ1bmtub3duX2Vycm9yIiwic2VydmVyX2Vycm9yIiwid3JvbmdfanNvbiIsIm9wZW5hcGlfZXJyb3IiLCJyZXNvdXJjZV9ub3RfZm91bmQiLCJvdHBfZ2VuZXJhdGlvbl9mYWlsdXJlIiwiaW52YWxpZF9yZWRpcmVjdF91cmkiLCJpbnZhbGlkX2NsaWVudCIsInRvb19tYW55X2NhbGxzX2Vycm9yIiwiZXJyb3JGYWN0b3J5IiwiZW51bV90eXBlIiwiRXJyb3JDb25zdHJ1Y3RvciIsImhvc3RVcmwiLCJnZW9Qcm92aWRlciIsImRlbGF5TXMiLCJfYXBpVXJsIiwiVVJMIiwiX2dlb1Byb3ZpZGVyIiwiX2RlbGF5TXMiLCJjbGllbnRJZCIsImdlbyIsIm9yaWdpbiIsImRhdGEiLCJjbGllbnRfaWQiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJfZ2V0VXJsIiwibWV0aG9kIiwiYm9keSIsIl9nZXRVcmxFbmNvZGVkQm9keSIsImhlYWRlcnMiLCJqc29uIiwib2siLCJzdGF0dXMiLCJzdWNjZXNzIiwiU2Vzc2lvbiIsImVycm9yIiwiZXJyb3JfZGVzY3JpcHRpb24iLCJzZXNzaW9uIiwic2Vzc2lvbklkIiwiYnVmZmVyIiwiYXJyYXlCdWZmZXIiLCJzY29wZSIsInJlZGlyZWN0VXJpIiwic3RhdGUiLCJub25jZSIsInJlc3BvbnNlVHlwZSIsInNlc3Npb25faWQiLCJnZXRWYWx1ZSIsInJlZGlyZWN0X3VyaSIsInJlc3BvbnNlX3R5cGUiLCJ1cmwiLCJrZXlzIiwiZm9yRWFjaCIsInBhcmFtZXRlck5hbWUiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJocmVmIiwic291bmRFbWl0dGVyIiwibmF2aWdhdG9yIiwiX2NhY2hlZEdlbyIsImdldEdlbyIsImNyZWF0ZVNlc3Npb24iLCJzb3VuZCIsImdldE9UUFNvdW5kIiwiYXV0aGVudGljYXRlVXJsIiwiZ2V0QXV0aGVudGljYXRpb25FbmRwb2ludFVybCIsImNvbnNvbGUiLCJpbmZvIiwibmF2aWdhdGUiLCJfdGltZW91dCIsImVtaXQiLCJvcHRpb25zIiwiZGlzcGxheSIsInByb21wdCIsInRoZW1lIiwicGF0aCIsInJlZHVjZSIsInJlc3VsdCIsImVuY29kZWRLZXkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJwdXNoIiwiam9pbiIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiY3JlYXRlZEF0IiwiRGF0ZSIsImNyZWF0ZWRfYXQiLCJhY2N1cmFjeSIsIl9sYXRpdHVkZSIsIl9sb25naXR1ZGUiLCJfYWNjdXJhY3kiLCJDeWJlcnVzS2V5QVBJIiwiY29udGV4dCIsInNvdXJjZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImRlY29kZUF1ZGlvRGF0YSIsImRlY29kZWREYXRhIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwic3RhcnQiLCJvbmVuZGVkIiwibG9jYXRpb24iLCJfc2NvcGUiLCJpbmNsdWRlcyIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsIl9lbmFibGVIaWdoQWNjdXJhY3kiLCJfbmF2aWdhdG9yIiwiX2dldEdlbyIsImNvb3JkcyIsIkdlb2xvY2F0aW9uIiwicmVqZWN0IiwibG9nIiwi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QUFPLElBQUl2QixRQUFRLENBQUNDLEVBQVM0QixLQUMzQi9DLFFBQVFnRCxJQUFJLHVCQUF1QlAsR0FFbkN6SCxLQUFLMkgsV0FBV00sWUFBWUMsbUJBQW1CL0IsRUFBUzRCLEVBQVEsQ0FBRU4sNEIsOEVDM0N4RSxtQ0F1RVcsS0FBQTlELGFBQXVCLE9BU3ZCLEtBQUEyQixRQUFrQixPQVVsQixLQUFBQyxPQUFpQixhQVFqQixLQUFBQyxNQUFnQiIsImZpbGUiOiJzZGsuZXM2Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiY3liZXJ1c2tleS1zZGtcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiY3liZXJ1c2tleS1zZGtcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiY3liZXJ1c2tleS1zZGtcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsImVudW0gRXJyb3JDb2RlIHtcbiAgdW5kZWZpbmVkID0gMSxcbiAgdW5rbm93bl9lcnJvcixcbiAgc2VydmVyX2Vycm9yLFxuICB3cm9uZ19qc29uLFxuICBvcGVuYXBpX2Vycm9yLFxuICByZXNvdXJjZV9ub3RfZm91bmQsXG4gIG90cF9nZW5lcmF0aW9uX2ZhaWx1cmUsXG4gIGludmFsaWRfcmVkaXJlY3RfdXJpLFxuICBpbnZhbGlkX2NsaWVudCxcbiAgdG9vX21hbnlfY2FsbHNfZXJyb3Jcbn1cblxuY2xhc3MgQ3liZXJ1c0tleUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwcml2YXRlIF9jb2RlOiBFcnJvckNvZGU7XG5cbiAgY29uc3RydWN0b3IoY29kZToga2V5b2YgdHlwZW9mIEVycm9yQ29kZSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLl9jb2RlID0gRXJyb3JDb2RlW2NvZGVdO1xuICB9XG5cbiAgZ2V0IGNvZGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gRXJyb3JDb2RlW3RoaXMuX2NvZGVdO1xuICB9XG5cbiAgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgfVxufVxuXG5jbGFzcyBVbmtub3duRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihjb2RlOiBrZXlvZiB0eXBlb2YgRXJyb3JDb2RlID0gJ3Vua25vd25fZXJyb3InLCBtZXNzYWdlOiBzdHJpbmcgPSAnVW5rbm93biBlcnJvciBvY2N1cmVkLicpIHtcbiAgICBzdXBlcihjb2RlLCBtZXNzYWdlKVxuICB9XG59XG5jbGFzcyBUb29NYW55Q2FsbHNFcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNvZGU6IGtleW9mIHR5cGVvZiBFcnJvckNvZGUgPSAndG9vX21hbnlfY2FsbHNfZXJyb3InLCBtZXNzYWdlOiBzdHJpbmcgPSAnWW91XFwndmUgZG9uZSB0b28gbWFueSBjYWxscy4nKSB7XG4gICAgc3VwZXIoY29kZSwgbWVzc2FnZSlcbiAgfVxufVxuXG5jbGFzcyBNaXNzaW5nUmVkaXJlY3RVcmkgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignaW52YWxpZF9yZWRpcmVjdF91cmknLCAnTWlzc2luZyByZWRpcmVjdGlvbiBVUkkuJyk7XG4gIH1cbn1cblxuY2xhc3MgV3JvbmdKc29uRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XG5jbGFzcyBPcGVuQXBpRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XG5jbGFzcyBSZXNvdXJjZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XG5jbGFzcyBPVFBHZW5lcmF0aW9uRXJyb3IgZXh0ZW5kcyBDeWJlcnVzS2V5RXJyb3IgeyB9XG5jbGFzcyBJbnZhbGlkUmVkaXJlY3RVcmlFcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7IH1cbmNsYXNzIEludmFsaWRDbGllbnRFcnJvciBleHRlbmRzIEN5YmVydXNLZXlFcnJvciB7IH1cblxuY29uc3QgTUFQUElORyA9IHtcbiAgW0Vycm9yQ29kZS51bmRlZmluZWRdOiBVbmtub3duRXJyb3IsXG4gIFtFcnJvckNvZGUudW5rbm93bl9lcnJvcl06IFVua25vd25FcnJvcixcbiAgW0Vycm9yQ29kZS5zZXJ2ZXJfZXJyb3JdOiBVbmtub3duRXJyb3IsXG4gIFtFcnJvckNvZGUudW5kZWZpbmVkXTogV3JvbmdKc29uRXJyb3IsXG4gIFtFcnJvckNvZGUud3JvbmdfanNvbl06IFdyb25nSnNvbkVycm9yLFxuICBbRXJyb3JDb2RlLm9wZW5hcGlfZXJyb3JdOiBPcGVuQXBpRXJyb3IsXG4gIFtFcnJvckNvZGUucmVzb3VyY2Vfbm90X2ZvdW5kXTogUmVzb3VyY2VOb3RGb3VuZEVycm9yLFxuICBbRXJyb3JDb2RlLm90cF9nZW5lcmF0aW9uX2ZhaWx1cmVdOiBPVFBHZW5lcmF0aW9uRXJyb3IsXG4gIFtFcnJvckNvZGUuaW52YWxpZF9yZWRpcmVjdF91cmldOiBJbnZhbGlkUmVkaXJlY3RVcmlFcnJvcixcbiAgW0Vycm9yQ29kZS5pbnZhbGlkX2NsaWVudF06IEludmFsaWRDbGllbnRFcnJvcixcbiAgW0Vycm9yQ29kZS50b29fbWFueV9jYWxsc19lcnJvcl06IFRvb01hbnlDYWxsc0Vycm9yXG59XG5cbmZ1bmN0aW9uIGVycm9yRmFjdG9yeShjb2RlOiBrZXlvZiB0eXBlb2YgRXJyb3JDb2RlLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgY29uc3QgZW51bV90eXBlID0gRXJyb3JDb2RlW2NvZGVdO1xuICBjb25zdCBFcnJvckNvbnN0cnVjdG9yID0gTUFQUElOR1tlbnVtX3R5cGVdO1xuXG4gIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKTtcbn1cblxuZXhwb3J0IHtcbiAgZXJyb3JGYWN0b3J5LFxuICBFcnJvckNvZGUsXG4gIEN5YmVydXNLZXlFcnJvcixcbiAgVW5rbm93bkVycm9yLFxuICBUb29NYW55Q2FsbHNFcnJvcixcbiAgV3JvbmdKc29uRXJyb3IsXG4gIE9wZW5BcGlFcnJvcixcbiAgUmVzb3VyY2VOb3RGb3VuZEVycm9yLFxuICBPVFBHZW5lcmF0aW9uRXJyb3IsXG4gIE1pc3NpbmdSZWRpcmVjdFVyaVxufTtcblxuIiwiaW1wb3J0IHsgU291bmRFbWl0dGVyIH0gZnJvbSAnLi9lbWl0dGVyL3NvdW5kRW1pdHRlcic7XG5pbXBvcnQgeyBlcnJvckZhY3RvcnksIFVua25vd25FcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IEdlb2xvY2F0aW9uIH0gZnJvbSAnLi9nZW9Qcm92aWRlci9nZW8nO1xuaW1wb3J0IHsgR2VvUHJvdmlkZXIgfSBmcm9tICcuL2dlb1Byb3ZpZGVyL2dlb1Byb3ZpZGVyJztcbmltcG9ydCB7IE5hdmlnYXRvciB9IGZyb20gJy4vbmF2aWdhdG9yL25hdmlnYXRvcic7XG5pbXBvcnQgeyBPcGVuSWRTY29wZVBhcnNlciB9IGZyb20gJy4vc2NvcGVQYXJzZXInO1xuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gJy4vc2Vzc2lvbic7XG5pbXBvcnQgeyBMb2dpbk9wdGlvbnMgfSBmcm9tICcuL2xvZ2luT3B0aW9ucyc7XG5cblxuLyoqXG4gKiBDeWJlcnVzIEtleSBBUEkgd2hpY2ggYWxsb3dzIHlvdSB0byBkbyBhIGRlbGVnYXRlIGxvZ2luIHdpdGggT3BlbklkIHByb3RvY29sLlxuICpcbiAqIEBjbGFzcyBDeWJlcnVzS2V5QVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBDeWJlcnVzS2V5QVBJIHtcbiAgcHJpdmF0ZSBfYXBpVXJsOiBVUkw7XG4gIHByaXZhdGUgX2dlb1Byb3ZpZGVyOiBHZW9Qcm92aWRlcjtcbiAgcHJpdmF0ZSBfY2FjaGVkR2VvOiBHZW9sb2NhdGlvbjtcbiAgcHJpdmF0ZSBfZGVsYXlNczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKkNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ3liZXJ1c0tleUFQSS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RVcmwgQmFzZSBVUkwgb2YgdGhlIGhvc3Qgc2VydmVyLCBlLmcuIGBodHRwczovL3Byb2R1Y3Rpb24tYXBpLmN5YmVydXNrZXkuY29tYFxuICAgKiBAcGFyYW0ge0dlb1Byb3ZpZGVyfSBbZ2VvUHJvdmlkZXJdIEdlb2xvY2FsaXphdGlvbiBwcm92aWRlci4gVXNlIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGxpa2UgYEhUTUw1R2VvUHJvdmlkZXJgLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbGF5TXM9NjAwXSBEZWxheSAobXMpIGJldHdlZW4gbWFraW5nIGFuIEF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgYW5kIGEgc291bmQgcGxheWluZy5cbiAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKGhvc3RVcmw6IHN0cmluZywgZ2VvUHJvdmlkZXI/OiBHZW9Qcm92aWRlciwgZGVsYXlNczogbnVtYmVyID0gNjAwKSB7XG4gICAgdGhpcy5fYXBpVXJsID0gbmV3IFVSTCgnL2FwaS92Mi8nLCBob3N0VXJsKTtcbiAgICB0aGlzLl9nZW9Qcm92aWRlciA9IGdlb1Byb3ZpZGVyO1xuICAgIHRoaXMuX2RlbGF5TXMgPSBkZWxheU1zO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIEN5YmVydXMgS2V5IHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBQdWJsaWMgY2xpZW50IElEIGdlbmVyYXRlZCBkdXJpbmcgY3JlYXRpbmcgdGhlIGFjY291bnQuXG4gICAqIEBwYXJhbSB7R2VvbG9jYXRpb259IFtnZW9dIEdpdmUgYSB2YWx1ZSBpZiB5b3Ugd2FudCB0byBwYXNzIG9wdGlvbmFsIGdlb2xvY2F0aW9uIG1lYXN1cmVtZW50LlxuICAgKiAgICBJdCBjYW4gYmUgbGF0ZXIgdXNlIHRvIGNvbXBhcmUgaXQgYWdhaW5zdCB0aGUgbW9iaWxlJ3MgbWVhc3VyZW1lbnQgKGlmIHlvdSBoYXZlIHNldCBgZmFpbF9vbl9nZW9fbWlzbWF0Y2hgKS5cbiAgICogICAgVGhvc2UgbWVhc3VyZW1lbnRzIGNhbiBiZSB1c2VkIGFsc28gdG8gZ2VuZXJhbCBpbXByb3ZlbWVudCBvZiB0aGUgc2VjdXJpdHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luXSBUaGUgb3JpZ2luIGRvbWFpbiBvZiB0aGUgcmVxdWVzdCBiZWluZyBtYWRlLiBJZiBgbnVsbGAgdGhlbiB0aGUgUmVmZXJlciBoZWFkZXIgd2lsbCBiZSB1c2VkLlxuICAgKiBAdGhyb3dzIFdyb25nSnNvbkVycm9yLCBPcGVuQXBpRXJyb3IsIFJlc291cmNlTm90Rm91bmRFcnJvciwgT1RQR2VuZXJhdGlvbkVycm9yLCBVbmtub3duRXJyb3JcbiAgICogQHJldHVybnMge1Byb21pc2U8U2Vzc2lvbj59IFRoZSBDeWJlcnVzIEtleSBzZXNzaW9uLlxuICAgKiBAbWVtYmVyb2YgQ3liZXJ1c0tleUFQSVxuICAgKi9cbiAgcHVibGljIGFzeW5jIGNyZWF0ZVNlc3Npb24oY2xpZW50SWQ6IHN0cmluZywgZ2VvPzogR2VvbG9jYXRpb24sIG9yaWdpbj86IHN0cmluZyk6IFByb21pc2U8U2Vzc2lvbj4ge1xuICAgIGNvbnN0IGRhdGEgPSB7IGNsaWVudF9pZDogY2xpZW50SWQgfTtcblxuICAgIGlmIChnZW8pIHtcbiAgICAgIGRhdGFbJ2xhdCddID0gZ2VvLmxhdGl0dWRlO1xuICAgICAgZGF0YVsnbG5nJ10gPSBnZW8ubG9uZ2l0dWRlO1xuICAgIH1cblxuICAgIGlmIChvcmlnaW4pIHtcbiAgICAgIGRhdGFbJ29yaWdpbiddID0gb3JpZ2luO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5fZ2V0VXJsKCdzZXNzaW9ucycpLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IHRoaXMuX2dldFVybEVuY29kZWRCb2R5KGRhdGEpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgaWYgKHJlc3BvbnNlLm9rICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxICYmIGpzb24uc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXNzaW9uKGpzb24uZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKCFqc29uLmVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVW5rbm93bkVycm9yKClcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvckZhY3RvcnkoanNvbi5lcnJvciwganNvbi5lcnJvcl9kZXNjcmlwdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIHNvbmljIHNvdW5kIHdpdGggZW1iZWRkZWQgT1RQLlxuICAgKlxuICAgKiBAcGFyYW0ge1Nlc3Npb259IHNlc3Npb24gQ3liZXJ1cyBLZXkncyBzZXNzaW9uIGdlbmVyYXRlZCBieSBhIHVzZXIgZm9yIGEgbG9naW4uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn0gQnl0ZXMgb2YgYSBzb3VuZC5cbiAgICogQHRocm93cyBSZXNvdXJjZU5vdEZvdW5kRXJyb3JcbiAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRPVFBTb3VuZChzZXNzaW9uOiBTZXNzaW9uKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5fZ2V0VXJsKGBzZXNzaW9ucy8ke3Nlc3Npb24uc2Vzc2lvbklkfWApLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXVkaW8vbXBlZycsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbidcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgYnVmZmVyOiBGdW5jdGlvbiA9IHJlc3BvbnNlLmJ1ZmZlciB8fCByZXNwb25zZS5hcnJheUJ1ZmZlcjtcbiAgICByZXR1cm4gYXdhaXQgYnVmZmVyLmNhbGwocmVzcG9uc2UpO1xuICB9XG5cblxuICAvKipcbiAgICogR2V0cyBPcGVuSUQncyBBdXRoZW50aWNhdGlvbiBlbmRwb2ludCBVUkwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIHByb2Nlc3MgdGhlIGF1dGhlbnRpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1Nlc3Npb259IHNlc3Npb24gQ3liZXJ1cyBLZXkgc2Vzc2lvbi5cbiAgICogQHBhcmFtIHtPcGVuSWRTY29wZVBhcnNlcn0gc2NvcGUgRWFjaCBzY29wZSByZXR1cm5zIGEgc2V0IG9mIHVzZXIgYXR0cmlidXRlcywgd2hpY2ggYXJlIGNhbGxlZCBjbGFpbXMuXG4gICAqICAgIE9uY2UgdGhlIHVzZXIgYXV0aG9yaXplcyB0aGUgcmVxdWVzdGVkIHNjb3BlcywgdGhlIGNsYWltcyBhcmUgcmV0dXJuZWQgaW4gYW4gSUQgVG9rZW4uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBQdWJsaWMgY2xpZW50IElEIGdlbmVyYXRlZCBkdXJpbmcgY3JlYXRpbmcgdGhlIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWRpcmVjdFVyaSBSZWRpcmVjdCBVUkkgdG8gd2hpY2ggdGhlIHJlc3BvbnNlIHdpbGwgYmUgc2VudC4gSWYgdGhlIHZhbHVlIGlzIG5vdCB3aGl0ZWxpc3RlZCB0aGVuIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzdGF0ZV1cbiAgICogICAgUkVDT01NRU5ERUQuIE9wYXF1ZSB2YWx1ZSB1c2VkIHRvIG1haW50YWluIHN0YXRlIGJldHdlZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBjYWxsYmFjay4gVHlwaWNhbGx5LCBDU1JGLCBYU1JGIG1pdGlnYXRpb24gaXMgZG9uZSBieSBjcnlwdG9ncmFwaGljYWxseSBiaW5kaW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB3aXRoIGEgYnJvd3NlciBjb29raWUuXG4gICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgcHJlc2VydmVzIHNvbWUgc3RhdGUgb2JqZWN0IHNldCBieSB0aGUgY2xpZW50IGluIHRoZSBBdXRoZW50aWNhdGlvbiByZXF1ZXN0IGFuZCBtYWtlcyBpdCBhdmFpbGFibGUgdG8gdGhlIGNsaWVudCBpbiB0aGUgcmVzcG9uc2UuXG4gICAqICAgIEl04oCZcyB0aGF0IHVuaXF1ZSBhbmQgbm9uLWd1ZXNzYWJsZSB2YWx1ZSB0aGF0IGFsbG93cyB5b3UgdG8gcHJldmVudCB0aGUgYXR0YWNrIGJ5IGNvbmZpcm1pbmcgaWYgdGhlIHZhbHVlIGNvbWluZyBmcm9tIHRoZSByZXNwb25zZSBtYXRjaGVzIHRoZSBvbmUgeW91IGV4cGVjdCAodGhlIG9uZSB5b3UgZ2VuZXJhdGVkIHdoZW4gaW5pdGlhdGluZyB0aGUgcmVxdWVzdCkuXG4gICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgc28geW91IGNhbiBlbmNvZGUgYW55IG90aGVyIGluZm9ybWF0aW9uIGluIGl0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vbmNlXVxuICAgKiAgICBTdHJpbmcgdmFsdWUgdXNlZCB0byBhc3NvY2lhdGUgYSBDbGllbnQgc2Vzc2lvbiB3aXRoIGFuIElEIFRva2VuLCBhbmQgdG8gbWl0aWdhdGUgcmVwbGF5IGF0dGFja3MuXG4gICAqICAgIFRoZSB2YWx1ZSBpcyBwYXNzZWQgdGhyb3VnaCB1bm1vZGlmaWVkIGZyb20gdGhlIEF1dGhlbnRpY2F0aW9uIFJlcXVlc3QgdG8gdGhlIElEIFRva2VuLlxuICAgKiAgICBTdWZmaWNpZW50IGVudHJvcHkgTVVTVCBiZSBwcmVzZW50IGluIHRoZSBub25jZSB2YWx1ZXMgdXNlZCB0byBwcmV2ZW50IGF0dGFja2VycyBmcm9tIGd1ZXNzaW5nIHZhbHVlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZVR5cGU9J2NvZGUnXSBPcGVuSWQgcmVzcG9uc2UgdHlwZS4gVGhlIGRlZmF1bHQgaXMgYGNvZGVgIChDb2RlIEZsb3csIGludm9sdmluZyB0aGUgZnJvbnQtY2hhbm5lbCBhbmQgYmFja2NoYW5uZWwpLlxuICAgKiBAcmV0dXJucyBPcGVuSUQncyBBdXRoZW50aWNhdGlvbiBlbmRwb2ludCBVUkxcbiAgICogQHRocm93cyBJbnZhbGlkUmVkaXJlY3RVcmlFcnJvciwgSW52YWxpZENsaWVudEVycm9yLCBSZXNvdXJjZU5vdEZvdW5kRXJyb3JcbiAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcbiAgICovXG4gIHB1YmxpYyBnZXRBdXRoZW50aWNhdGlvbkVuZHBvaW50VXJsKHNlc3Npb246IFNlc3Npb24sIHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlciwgY2xpZW50SWQ6IHN0cmluZywgcmVkaXJlY3RVcmk6IHN0cmluZywgc3RhdGU/OiBzdHJpbmcsIG5vbmNlPzogc3RyaW5nLCByZXNwb25zZVR5cGUgPSAnY29kZScpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRhdGE6IGFueSA9IHtcbiAgICAgIHNlc3Npb25faWQ6IHNlc3Npb24uc2Vzc2lvbklkLFxuICAgICAgY2xpZW50X2lkOiBjbGllbnRJZCxcbiAgICAgIHNjb3BlOiBzY29wZS5nZXRWYWx1ZSgpLFxuICAgICAgcmVkaXJlY3RfdXJpOiByZWRpcmVjdFVyaSxcbiAgICAgIHJlc3BvbnNlX3R5cGU6IHJlc3BvbnNlVHlwZVxuICAgIH07XG5cbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIGRhdGFbJ3N0YXRlJ10gPSBzdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGRhdGFbJ25vbmNlJ10gPSBub25jZTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRoaXMuX2dldFVybCgnYXV0aGVudGljYXRlJykpO1xuXG4gICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgocGFyYW1ldGVyTmFtZSkgPT4ge1xuICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQocGFyYW1ldGVyTmFtZSwgZGF0YVtwYXJhbWV0ZXJOYW1lXSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXJsLmhyZWY7XG4gIH1cblxuICAvKipcbiAgICogTWFrZXMgYW4gYXV0aGVudGljYXRpb24gd2l0aCBDeWJlcnVzIEtleS4gXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBQdWJsaWMgY2xpZW50IElEIGdlbmVyYXRlZCBkdXJpbmcgY3JlYXRpbmcgdGhlIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWRpcmVjdFVyaSBSZWRpcmVjdCBVUkkgdG8gd2hpY2ggdGhlIHJlc3BvbnNlIHdpbGwgYmUgc2VudC4gSWYgdGhlIHZhbHVlIGlzIG5vdCB3aGl0ZWxpc3RlZCB0aGVuIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICogQHBhcmFtIHtPcGVuSWRTY29wZVBhcnNlcn0gc2NvcGUgRWFjaCBzY29wZSByZXR1cm5zIGEgc2V0IG9mIHVzZXIgYXR0cmlidXRlcywgd2hpY2ggYXJlIGNhbGxlZCBjbGFpbXMuXG4gICAqICAgIE9uY2UgdGhlIHVzZXIgYXV0aG9yaXplcyB0aGUgcmVxdWVzdGVkIHNjb3BlcywgdGhlIGNsYWltcyBhcmUgcmV0dXJuZWQgaW4gYW4gSUQgVG9rZW4uXG4gICAqIEBwYXJhbSB7U291bmRFbWl0dGVyfSBzb3VuZEVtaXR0ZXIgSW50ZXJmYWNlIHdoaWNoIGNhbiBwbGF5IGEgc291bmQuXG4gICAqIEBwYXJhbSB7TmF2aWdhdG9yfSBuYXZpZ2F0b3IgQ2xhc3MgZGVzY3JpYmVzIGFuIGFjdGlvbiB0aGF0IHdpbGwgYmUgZG9uZSB0byBBdXRoZW50aWNhdGlvbiBVUkwuIEZvciBicm93c2VycyBpdCB3aWxsIGJlIGEgcGFnZSByZWRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmlnaW5dIFRoZSBvcmlnaW4gZG9tYWluIG9mIHRoZSByZXF1ZXN0IGJlaW5nIG1hZGUuIElmIGBudWxsYCB0aGVuIHRoZSBSZWZlcmVyIGhlYWRlciB3aWxsIGJlIHVzZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RhdGVdXG4gICAqICAgIFJFQ09NTUVOREVELiBPcGFxdWUgdmFsdWUgdXNlZCB0byBtYWludGFpbiBzdGF0ZSBiZXR3ZWVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgY2FsbGJhY2suIFR5cGljYWxseSwgQ1NSRiwgWFNSRiBtaXRpZ2F0aW9uIGlzIGRvbmUgYnkgY3J5cHRvZ3JhcGhpY2FsbHkgYmluZGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2l0aCBhIGJyb3dzZXIgY29va2llLlxuICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIHByZXNlcnZlcyBzb21lIHN0YXRlIG9iamVjdCBzZXQgYnkgdGhlIGNsaWVudCBpbiB0aGUgQXV0aGVudGljYXRpb24gcmVxdWVzdCBhbmQgbWFrZXMgaXQgYXZhaWxhYmxlIHRvIHRoZSBjbGllbnQgaW4gdGhlIHJlc3BvbnNlLlxuICAgKiAgICBJdOKAmXMgdGhhdCB1bmlxdWUgYW5kIG5vbi1ndWVzc2FibGUgdmFsdWUgdGhhdCBhbGxvd3MgeW91IHRvIHByZXZlbnQgdGhlIGF0dGFjayBieSBjb25maXJtaW5nIGlmIHRoZSB2YWx1ZSBjb21pbmcgZnJvbSB0aGUgcmVzcG9uc2UgbWF0Y2hlcyB0aGUgb25lIHlvdSBleHBlY3QgKHRoZSBvbmUgeW91IGdlbmVyYXRlZCB3aGVuIGluaXRpYXRpbmcgdGhlIHJlcXVlc3QpLlxuICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHNvIHlvdSBjYW4gZW5jb2RlIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbiBpdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtub25jZV1cbiAgICogICAgU3RyaW5nIHZhbHVlIHVzZWQgdG8gYXNzb2NpYXRlIGEgQ2xpZW50IHNlc3Npb24gd2l0aCBhbiBJRCBUb2tlbiwgYW5kIHRvIG1pdGlnYXRlIHJlcGxheSBhdHRhY2tzLlxuICAgKiAgICBUaGUgdmFsdWUgaXMgcGFzc2VkIHRocm91Z2ggdW5tb2RpZmllZCBmcm9tIHRoZSBBdXRoZW50aWNhdGlvbiBSZXF1ZXN0IHRvIHRoZSBJRCBUb2tlbi5cbiAgICogICAgU3VmZmljaWVudCBlbnRyb3B5IE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgbm9uY2UgdmFsdWVzIHVzZWQgdG8gcHJldmVudCBhdHRhY2tlcnMgZnJvbSBndWVzc2luZyB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VUeXBlPSdjb2RlJ10gT3BlbklkIHJlc3BvbnNlIHR5cGUuIFRoZSBkZWZhdWx0IGlzIGBjb2RlYCAoQ29kZSBGbG93LCBpbnZvbHZpbmcgdGhlIGZyb250LWNoYW5uZWwgYW5kIGJhY2tjaGFubmVsKS5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqIEBtZW1iZXJvZiBDeWJlcnVzS2V5QVBJXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgYXV0aGVudGljYXRlKGNsaWVudElkOiBzdHJpbmcsIHJlZGlyZWN0VXJpOiBzdHJpbmcsIHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlciwgc291bmRFbWl0dGVyOiBTb3VuZEVtaXR0ZXIsIG5hdmlnYXRvcjogTmF2aWdhdG9yLCBvcmlnaW4/OiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nLCBub25jZT86IHN0cmluZywgcmVzcG9uc2VUeXBlID0gJ2NvZGUnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuX2dlb1Byb3ZpZGVyICYmICF0aGlzLl9jYWNoZWRHZW8pIHtcbiAgICAgIHRoaXMuX2NhY2hlZEdlbyA9IGF3YWl0IHRoaXMuX2dlb1Byb3ZpZGVyLmdldEdlbygpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLmNyZWF0ZVNlc3Npb24oY2xpZW50SWQsIHRoaXMuX2NhY2hlZEdlbywgb3JpZ2luKTtcbiAgICBjb25zdCBzb3VuZCA9IGF3YWl0IHRoaXMuZ2V0T1RQU291bmQoc2Vzc2lvbik7XG5cbiAgICBjb25zdCBhdXRoZW50aWNhdGVVcmwgPSB0aGlzLmdldEF1dGhlbnRpY2F0aW9uRW5kcG9pbnRVcmwoc2Vzc2lvbiwgc2NvcGUsIGNsaWVudElkLCByZWRpcmVjdFVyaSwgc3RhdGUsIG5vbmNlLCByZXNwb25zZVR5cGUpO1xuXG4gICAgY29uc29sZS5pbmZvKGBOYXZpZ2F0aW5nIHRvICR7YXV0aGVudGljYXRlVXJsfS5gKTtcblxuICAgIGF3YWl0IG5hdmlnYXRvci5uYXZpZ2F0ZShhdXRoZW50aWNhdGVVcmwpO1xuXG4gICAgYXdhaXQgdGhpcy5fdGltZW91dCgxMDAwKTtcblxuICAgIGNvbnNvbGUuaW5mbyhgU291bmQgZW1pdHRpbmcuYClcblxuICAgIGF3YWl0IHNvdW5kRW1pdHRlci5lbWl0KHNvdW5kKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZXMgdG8gQXV0aGVudGljYXRpb24gRW5kcG9pbnQgYW5kIHJldHVybnMgYSBzb3VuZC4gWW91IGhhdmUgdG8gZW1pdCBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIFB1YmxpYyBjbGllbnQgSUQgZ2VuZXJhdGVkIGR1cmluZyBjcmVhdGluZyB0aGUgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0VXJpIFJlZGlyZWN0IFVSSSB0byB3aGljaCB0aGUgcmVzcG9uc2Ugd2lsbCBiZSBzZW50LiBJZiB0aGUgdmFsdWUgaXMgbm90IHdoaXRlbGlzdGVkIHRoZW4gdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgKiBAcGFyYW0ge09wZW5JZFNjb3BlUGFyc2VyfSBzY29wZSBFYWNoIHNjb3BlIHJldHVybnMgYSBzZXQgb2YgdXNlciBhdHRyaWJ1dGVzLCB3aGljaCBhcmUgY2FsbGVkIGNsYWltcy5cbiAgICogICAgT25jZSB0aGUgdXNlciBhdXRob3JpemVzIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLCB0aGUgY2xhaW1zIGFyZSByZXR1cm5lZCBpbiBhbiBJRCBUb2tlbi5cbiAgICogQHBhcmFtIHtOYXZpZ2F0b3J9IG5hdmlnYXRvciBDbGFzcyBkZXNjcmliZXMgYW4gYWN0aW9uIHRoYXQgd2lsbCBiZSBkb25lIHRvIEF1dGhlbnRpY2F0aW9uIFVSTC4gRm9yIGJyb3dzZXJzIGl0IHdpbGwgYmUgYSBwYWdlIHJlZGlyZWN0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29yaWdpbl0gVGhlIG9yaWdpbiBkb21haW4gb2YgdGhlIHJlcXVlc3QgYmVpbmcgbWFkZS4gSWYgYG51bGxgIHRoZW4gdGhlIFJlZmVyZXIgaGVhZGVyIHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzdGF0ZV1cbiAgICogICAgUkVDT01NRU5ERUQuIE9wYXF1ZSB2YWx1ZSB1c2VkIHRvIG1haW50YWluIHN0YXRlIGJldHdlZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBjYWxsYmFjay4gVHlwaWNhbGx5LCBDU1JGLCBYU1JGIG1pdGlnYXRpb24gaXMgZG9uZSBieSBjcnlwdG9ncmFwaGljYWxseSBiaW5kaW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB3aXRoIGEgYnJvd3NlciBjb29raWUuXG4gICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgcHJlc2VydmVzIHNvbWUgc3RhdGUgb2JqZWN0IHNldCBieSB0aGUgY2xpZW50IGluIHRoZSBBdXRoZW50aWNhdGlvbiByZXF1ZXN0IGFuZCBtYWtlcyBpdCBhdmFpbGFibGUgdG8gdGhlIGNsaWVudCBpbiB0aGUgcmVzcG9uc2UuXG4gICAqICAgIEl04oCZcyB0aGF0IHVuaXF1ZSBhbmQgbm9uLWd1ZXNzYWJsZSB2YWx1ZSB0aGF0IGFsbG93cyB5b3UgdG8gcHJldmVudCB0aGUgYXR0YWNrIGJ5IGNvbmZpcm1pbmcgaWYgdGhlIHZhbHVlIGNvbWluZyBmcm9tIHRoZSByZXNwb25zZSBtYXRjaGVzIHRoZSBvbmUgeW91IGV4cGVjdCAodGhlIG9uZSB5b3UgZ2VuZXJhdGVkIHdoZW4gaW5pdGlhdGluZyB0aGUgcmVxdWVzdCkuXG4gICAqICAgIFRoZSBzdGF0ZSBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgc28geW91IGNhbiBlbmNvZGUgYW55IG90aGVyIGluZm9ybWF0aW9uIGluIGl0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vbmNlXVxuICAgKiAgICBTdHJpbmcgdmFsdWUgdXNlZCB0byBhc3NvY2lhdGUgYSBDbGllbnQgc2Vzc2lvbiB3aXRoIGFuIElEIFRva2VuLCBhbmQgdG8gbWl0aWdhdGUgcmVwbGF5IGF0dGFja3MuXG4gICAqICAgIFRoZSB2YWx1ZSBpcyBwYXNzZWQgdGhyb3VnaCB1bm1vZGlmaWVkIGZyb20gdGhlIEF1dGhlbnRpY2F0aW9uIFJlcXVlc3QgdG8gdGhlIElEIFRva2VuLlxuICAgKiAgICBTdWZmaWNpZW50IGVudHJvcHkgTVVTVCBiZSBwcmVzZW50IGluIHRoZSBub25jZSB2YWx1ZXMgdXNlZCB0byBwcmV2ZW50IGF0dGFja2VycyBmcm9tIGd1ZXNzaW5nIHZhbHVlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZVR5cGU9J2NvZGUnXSBPcGVuSWQgcmVzcG9uc2UgdHlwZS4gVGhlIGRlZmF1bHQgaXMgYGNvZGVgIChDb2RlIEZsb3csIGludm9sdmluZyB0aGUgZnJvbnQtY2hhbm5lbCBhbmQgYmFja2NoYW5uZWwpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICogQG1lbWJlcm9mIEN5YmVydXNLZXlBUElcbiAgICovXG4gIHB1YmxpYyBhc3luYyBuYXZpZ2F0ZUFuZEdldFRoZVNvdW5kKGNsaWVudElkOiBzdHJpbmcsIHJlZGlyZWN0VXJpOiBzdHJpbmcsIHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlciwgbmF2aWdhdG9yOiBOYXZpZ2F0b3IsIG9yaWdpbj86IHN0cmluZywgc3RhdGU/OiBzdHJpbmcsIG5vbmNlPzogc3RyaW5nLCByZXNwb25zZVR5cGUgPSAnY29kZScpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgaWYgKHRoaXMuX2dlb1Byb3ZpZGVyICYmICF0aGlzLl9jYWNoZWRHZW8pIHtcbiAgICAgIHRoaXMuX2NhY2hlZEdlbyA9IGF3YWl0IHRoaXMuX2dlb1Byb3ZpZGVyLmdldEdlbygpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLmNyZWF0ZVNlc3Npb24oY2xpZW50SWQsIHRoaXMuX2NhY2hlZEdlbywgb3JpZ2luKTtcbiAgICBjb25zdCBzb3VuZCA9IGF3YWl0IHRoaXMuZ2V0T1RQU291bmQoc2Vzc2lvbik7XG5cbiAgICBjb25zdCBhdXRoZW50aWNhdGVVcmwgPSB0aGlzLmdldEF1dGhlbnRpY2F0aW9uRW5kcG9pbnRVcmwoc2Vzc2lvbiwgc2NvcGUsIGNsaWVudElkLCByZWRpcmVjdFVyaSwgc3RhdGUsIG5vbmNlLCByZXNwb25zZVR5cGUpO1xuXG4gICAgY29uc29sZS5pbmZvKGBOYXZpZ2F0aW5nIHRvICR7YXV0aGVudGljYXRlVXJsfS5gKTtcblxuICAgIGF3YWl0IG5hdmlnYXRvci5uYXZpZ2F0ZShhdXRoZW50aWNhdGVVcmwpO1xuXG4gICAgYXdhaXQgdGhpcy5fdGltZW91dCh0aGlzLl9kZWxheU1zKTtcblxuICAgIHJldHVybiBzb3VuZDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2dpblRocm91Z2hDeWJlcnVzS2V5RGFzaGJvYXJkKG9wdGlvbnM6IExvZ2luT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRhdGE6IGFueSA9IHtcbiAgICAgIGNsaWVudF9pZDogb3B0aW9ucy5jbGllbnRJZCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLmdldFZhbHVlKCksXG4gICAgICByZWRpcmVjdF91cmk6IG9wdGlvbnMucmVkaXJlY3RVcmksXG4gICAgICByZXNwb25zZV90eXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSxcbiAgICAgIGRpc3BsYXk6IG9wdGlvbnMuZGlzcGxheSxcbiAgICAgIHByb21wdDogb3B0aW9ucy5wcm9tcHQsXG4gICAgICB0aGVtZTogb3B0aW9ucy50aGVtZSxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMuc3RhdGUpIHtcbiAgICAgIGRhdGFbJ3N0YXRlJ10gPSBvcHRpb25zLnN0YXRlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm5vbmNlKSB7XG4gICAgICBkYXRhWydub25jZSddID0gb3B0aW9ucy5ub25jZTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRoaXMuX2dldFVybCgnYXV0aG9yaXplJykpO1xuXG4gICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgocGFyYW1ldGVyTmFtZSkgPT4ge1xuICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQocGFyYW1ldGVyTmFtZSwgZGF0YVtwYXJhbWV0ZXJOYW1lXSk7XG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmluZm8oYE5hdmlnYXRpbmcgdG8gJHt1cmwuaHJlZn0uYCk7XG5cbiAgICBhd2FpdCBvcHRpb25zLm5hdmlnYXRvci5uYXZpZ2F0ZSh1cmwuaHJlZik7XG4gIH1cblxuICBwcml2YXRlIF9nZXRVcmwocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKG5ldyBVUkwocGF0aCwgdGhpcy5fYXBpVXJsKSkuaHJlZjtcbiAgfVxuXG4gIHByaXZhdGUgX2dldFVybEVuY29kZWRCb2R5KGRhdGE6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZTxzdHJpbmdbXT4oKHJlc3VsdDogc3RyaW5nW10sIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBlbmNvZGVkS2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICBjb25zdCBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQoZGF0YVtrZXldKTtcblxuICAgICAgcmVzdWx0LnB1c2goYCR7ZW5jb2RlZEtleX09JHtlbmNvZGVkVmFsdWV9YCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgW10pLmpvaW4oXCImXCIpXG4gIH1cblxuICBwcml2YXRlIF90aW1lb3V0KG1zOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIFNlc3Npb25SZXNwb25zZSB7XG4gIHNlc3Npb25faWQ6IHN0cmluZztcbiAgY3JlYXRlZF9hdDogc3RyaW5nO1xufVxuXG5cbi8qKlxuICogRGF0YSBjbGFzcyByZXByZXNlbnRpbmcgYSBDeWJlcnVzIEtleSBzZXNzaW9uLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBTZXNzaW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uIHtcbiAgLyoqXG4gICAqIFNlc3Npb24ncyB1bmlxdWUgaWRlbnRpZmllci4gSXQncyB2YWxpZCB1cCB0byAyMHMuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBTZXNzaW9uXG4gICAqL1xuICBwdWJsaWMgc2Vzc2lvbklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgVVRDIGRhdGUgcmVwcmVzZW50aW5nIGEgZGF0ZSAoYW5kIHRpbWUpIHdoZW4gYSBzZXNzaW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtEYXRlfVxuICAgKiBAbWVtYmVyb2YgU2Vzc2lvblxuICAgKi9cbiAgcHVibGljIGNyZWF0ZWRBdDogRGF0ZTtcblxuICBjb25zdHJ1Y3Rvcihqc29uOiBTZXNzaW9uUmVzcG9uc2UpIHtcbiAgICB0aGlzLnNlc3Npb25JZCA9IGpzb24uc2Vzc2lvbl9pZDtcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IG5ldyBEYXRlKGpzb24uY3JlYXRlZF9hdCk7XG4gIH1cbn0iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBhIHRha2VuIGdlb2xvY2F0aW9uIG1lYXN1cmVtZW50LlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBHZW9sb2NhdGlvblxuICovXG5leHBvcnQgY2xhc3MgR2VvbG9jYXRpb24ge1xuICBwcml2YXRlIF9sYXRpdHVkZTogbnVtYmVyO1xuICBwcml2YXRlIF9sb25naXR1ZGU6IG51bWJlcjtcbiAgcHJpdmF0ZSBfYWNjdXJhY3k6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihsYXRpdHVkZTogbnVtYmVyLCBsb25naXR1ZGU6IG51bWJlciwgYWNjdXJhY3k/OiBudW1iZXIpIHtcbiAgICB0aGlzLl9sYXRpdHVkZSA9IGxhdGl0dWRlO1xuICAgIHRoaXMuX2xvbmdpdHVkZSA9IGxvbmdpdHVkZTtcbiAgICB0aGlzLl9hY2N1cmFjeSA9IGFjY3VyYWN5O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxhdGl0dWRlLlxuICAgKlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQG1lbWJlcm9mIEdlb2xvY2F0aW9uXG4gICAqL1xuICBnZXQgbGF0aXR1ZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGF0aXR1ZGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIGxvbmdpdHVkZS5cbiAgICpcbiAgICogQHJlYWRvbmx5XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBtZW1iZXJvZiBHZW9sb2NhdGlvblxuICAgKi9cbiAgZ2V0IGxvbmdpdHVkZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sb25naXR1ZGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBhY2N1cmFjeSBvZiBhIG1lYXN1cmVtZW50LlxuICAgKlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQG1lbWJlcm9mIEdlb2xvY2F0aW9uXG4gICAqL1xuICBnZXQgYWNjdXJhY3koKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYWNjdXJhY3k7XG4gIH1cbn0iLCJleHBvcnQgKiBmcm9tICcuL3Nkay9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvZW1pdHRlci9zb3VuZEVtaXR0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvZW1pdHRlci93ZWJBdWRpb1NvdW5kRW1pdHRlcic7XG5leHBvcnQgKiBmcm9tICcuL3Nkay9lcnJvcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvbmF2aWdhdG9yL25hdmlnYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL3Nkay9uYXZpZ2F0b3IvcmVkaXJlY3ROYXZpZ2F0b3InO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvc2NvcGVQYXJzZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvc2Vzc2lvbic7XG5leHBvcnQgKiBmcm9tICcuL3Nkay9nZW9Qcm92aWRlci9nZW8nO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvZ2VvUHJvdmlkZXIvZ2VvUHJvdmlkZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zZGsvZ2VvUHJvdmlkZXIvaHRtbDVHZW9Qcm92aWRlcic7XG5leHBvcnQgKiBmcm9tICcuL3Nkay9sb2dpbk9wdGlvbnMnO1xuXG5pbXBvcnQgeyBDeWJlcnVzS2V5QVBJIH0gZnJvbSAnLi9zZGsvYXBpJztcbmV4cG9ydCBkZWZhdWx0IEN5YmVydXNLZXlBUEk7IiwiaW1wb3J0IHsgU291bmRFbWl0dGVyIH0gZnJvbSAnLi9zb3VuZEVtaXR0ZXInO1xuaW1wb3J0IHsgT1RQR2VuZXJhdGlvbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuLyoqXG4gKiBDbGFzcyB1c2VzIGEgSFRNTDUncyBBdWRpb0NvbnRleHQgaW50ZXJmYWNlIHRvIHBsYXkgYSBzb3VuZC5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgV2ViQXVkaW9Tb3VuZEVtaXR0ZXJcbiAqIEBpbXBsZW1lbnRzIHtTb3VuZEVtaXR0ZXJ9XG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJBdWRpb1NvdW5kRW1pdHRlciBpbXBsZW1lbnRzIFNvdW5kRW1pdHRlciB7XG5cbiAgLyoqXG4gICAqIEVtaXRzIGEgc291bmQgdGhyb3VnaCBIVE1MNSdzIEF1ZGlvQ29udGV4dCBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IHNvdW5kIEEgYmluYXJ5IHJlY29yZCBvZiB0aGUgc291bmQgeW91IHdhbnQgdG8gcGxheS5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqIEBtZW1iZXJvZiBXZWJBdWRpb1NvdW5kRW1pdHRlclxuICAgKi9cbiAgYXN5bmMgZW1pdChzb3VuZDogQXJyYXlCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgY29udGV4dDogQXVkaW9Db250ZXh0O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnRleHQgPSBuZXcgKHdpbmRvd1snQXVkaW9Db250ZXh0J10gfHwgd2luZG93Wyd3ZWJraXRBdWRpb0NvbnRleHQnXSkoKTtcbiAgICB9IGNhdGNoIHtcblxuICAgICAgdGhyb3cgbmV3IE9UUEdlbmVyYXRpb25FcnJvcignb3RwX2dlbmVyYXRpb25fZmFpbHVyZScsICdBdWRpb0NvbnRleHQgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHNvdXJjZSA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cbiAgICBjb250ZXh0LmRlY29kZUF1ZGlvRGF0YShzb3VuZCwgKGRlY29kZWREYXRhKSA9PiB7XG4gICAgICBzb3VyY2UuYnVmZmVyID0gZGVjb2RlZERhdGE7XG4gICAgICBzb3VyY2UuY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgIHNvdXJjZS5zdGFydCgwKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IChuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgc291cmNlLm9uZW5kZWQgPSByZXNvbHZlO1xuICAgIH0pKTtcbiAgfVxufVxuXG4iLCJpbXBvcnQgeyBNaXNzaW5nUmVkaXJlY3RVcmkgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgTmF2aWdhdG9yIH0gZnJvbSAnLi9uYXZpZ2F0b3InO1xuXG5cbi8qKlxuICogQ2xhc3MgZGVzY3JpYmVzIGhvdyBPcGVuSUQncyBBdXRoZW50aWNhdGlvbiBFbmRwb2ludCB3aWxsIGJlIGhhbmRsZWQuXG4gKiBUaGlzIGNsYXNzIGlzIHRoaWdodGVuIHRvIGEgZGVmYXVsdCBicm93c2VyIGJlaGF2aW91ciBmb3IgT3BlbklEIHByb3RvY29sIC0gYSByZWRpcmVjdGlvbi5cbiAqIFdoaWNoIG1lYW5zIHRoYXQgeW91ciBVUkwgd2lsbCBiZSB0ZW1wb3JhcmlseSByZXBsYWNlZCBieSB0aGUgQXV0aGVudGljYXRpb24gRW5kcG9pbnRcbiAqIGFuZCByZXBsYWNlZCBhZ2FpbiBieSBpdHMgcmVzcG9uc2UgLSBIVFRQIDMwMi4gVGhlIG5ldyBsb2NhdGlvbiB3aWxsIGJlIHRoZSBvbmUgeW91IGRlZmluZWQgYXMgeW91ciBgcmVkaXJlY3RfdXJpYC5cbiAqIFxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlZGlyZWN0TmF2aWdhdG9yXG4gKiBAaW1wbGVtZW50cyB7TmF2aWdhdG9yfVxuICovXG5leHBvcnQgY2xhc3MgUmVkaXJlY3ROYXZpZ2F0b3IgaW1wbGVtZW50cyBOYXZpZ2F0b3Ige1xuICAvKipcbiAgICogTmF2aWdhdGVzIHRvIHRoZSBnaXZlbiBVUkwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgQXV0aGVudGljYXRpb24gRW5kcG9pbnQgVVJMLlxuICAgKiBAdGhyb3dzIE1pc3NpbmdSZWRpcmVjdFVyaVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICogQG1lbWJlcm9mIFJlZGlyZWN0TmF2aWdhdG9yXG4gICAqL1xuICBhc3luYyBuYXZpZ2F0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBuZXcgTWlzc2luZ1JlZGlyZWN0VXJpKClcbiAgICB9XG5cbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxufSIsIlxuLyoqXG4gKiBIYW5keSBjbGFzcyB0byBkZWZpbmUgYW4gT3BlbklEJ3Mgc2NvcGUuXG4gKiBTY29wZXMgYXJlIHVzZWQgYnkgYW4gYXBwbGljYXRpb24gZHVyaW5nIGF1dGhlbnRpY2F0aW9uIHRvIGF1dGhvcml6ZSBhY2Nlc3MgdG8gYSB1c2VyJ3MgZGV0YWlscyxcbiAqIGxpa2UgbmFtZSBhbmQgcGljdHVyZS4gRWFjaCBzY29wZSByZXR1cm5zIGEgc2V0IG9mIHVzZXIgYXR0cmlidXRlcywgd2hpY2ggYXJlIGNhbGxlZCBjbGFpbXMuIFxuICogXG4gKiBZb3UgY2FuIHVzZSBhZGRpdGlvbmFsIHZhbHVlcyBgZW1haWxgIChhZGQgYSB1c2VyJ3MgZW1haWwgY2xhaW0pIGFuZCBgcHJvZmlsZWAgKGFkZCB1c2VyIGZpcnN0IGFuZCBsYXN0IG5hbWUpLlxuICogXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBzY29wZVBhcnNlciA9IG5ldyBPcGVuSWRTY29wZVBhcnNlcigpO1xuICogY29uc3Qgc2NvcGUgPSBzY29wZVBhcnNlci5hZGRFbWFpbCgpLmFkZFByb2ZpbGUoKS5nZXRWYWx1ZSgpO1xuICogYGBgXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIE9wZW5JZFNjb3BlUGFyc2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBPcGVuSWRTY29wZVBhcnNlciB7XG4gIHByaXZhdGUgX3Njb3BlOiBBcnJheTxzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Njb3BlID0gWydvcGVuaWQnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGBlbWFpbGAgc2NvcGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKiBAbWVtYmVyb2YgT3BlbklkU2NvcGVQYXJzZXJcbiAgICovXG4gIHB1YmxpYyBhZGRFbWFpbCgpOiB0aGlzIHtcbiAgICBpZiAodGhpcy5fc2NvcGUuaW5jbHVkZXMoJ2VtYWlsJykpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuX3Njb3BlLnB1c2goJ2VtYWlsJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGBwcm9maWxlYCBzY29wZS5cbiAgICpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqIEBtZW1iZXJvZiBPcGVuSWRTY29wZVBhcnNlclxuICAgKi9cbiAgcHVibGljIGFkZFByb2ZpbGUoKTogdGhpcyB7XG4gICAgaWYgKHRoaXMuX3Njb3BlLmluY2x1ZGVzKCdwcm9maWxlJykpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuX3Njb3BlLnB1c2goJ3Byb2ZpbGUnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgZm9ybWF0dGVkIHNjb3BlIHZhbHVlLCBlLmcuIGBvcGVuaWQgZW1haWxgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgT3BlbklkU2NvcGVQYXJzZXJcbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9zY29wZS5qb2luKCcgJyk7XG4gIH1cbn0iLCJpbXBvcnQgeyBHZW9sb2NhdGlvbiB9IGZyb20gJy4vZ2VvJztcbmltcG9ydCB7IEdlb1Byb3ZpZGVyIH0gZnJvbSAnLi9nZW9Qcm92aWRlcic7XG5cblxuLyoqXG4gKiBDbGFzcyBwcm92aWRlcyBhIGdlb2xvY2FsaXphdGlvbiBtZWFzdXJlbWVudC5cbiAqIEl0IHVzZXMgYSBIVE1MNSdzIGBHZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oKWAgbWV0aG9kLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBIVE1MNUdlb1Byb3ZpZGVyXG4gKiBAaW1wbGVtZW50cyB7R2VvUHJvdmlkZXJ9XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MNUdlb1Byb3ZpZGVyIGltcGxlbWVudHMgR2VvUHJvdmlkZXIge1xuICBwcml2YXRlIF9lbmFibGVIaWdoQWNjdXJhY3k6IGJvb2xlYW47XG4gIHByaXZhdGUgX25hdmlnYXRvcjogTmF2aWdhdG9yO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEhUTUw1R2VvUHJvdmlkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2VuYWJsZUhpZ2hBY2N1cmFjeT1mYWxzZV0gIEZvcmNlcyBoaWdoIGFjY3VyYWN5IG9mIHRoZSBnZW9sb2NhdGlvbi4gSXQgbWF5IHRha2UgbG9uZ2VyLlxuICAgKiBAcGFyYW0ge05hdmlnYXRvcn0gW25hdmlnYXRvcj13aW5kb3cubmF2aWdhdG9yXVxuICAgKiBAbWVtYmVyb2YgSFRNTDVHZW9Qcm92aWRlclxuICAgKi9cbiAgY29uc3RydWN0b3IoZW5hYmxlSGlnaEFjY3VyYWN5ID0gZmFsc2UsIG5hdmlnYXRvcjogTmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcikge1xuICAgIHRoaXMuX2VuYWJsZUhpZ2hBY2N1cmFjeSA9IGVuYWJsZUhpZ2hBY2N1cmFjeTtcbiAgICB0aGlzLl9uYXZpZ2F0b3IgPSBuYXZpZ2F0b3I7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIGdlb2xvY2FsaXphdGlvbiBtZWFzdXJlbWVudC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8R2VvbG9jYXRpb24+fSBHZW9sb2NhbGl6YXRpb24gbWVhc3VyZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBIVE1MNUdlb1Byb3ZpZGVyXG4gICAqL1xuICBhc3luYyBnZXRHZW8oKTogUHJvbWlzZTxHZW9sb2NhdGlvbj4ge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuX2dldEdlbyh0aGlzLl9lbmFibGVIaWdoQWNjdXJhY3kpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gRS5nLiB1c2VyIGRpZG4ndCBhZ3JlZSBvbiBnZW9saWNhbGl6YXRpb24uXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNvb3JkcyB9ID0gcmVzdWx0O1xuXG4gICAgcmV0dXJuIG5ldyBHZW9sb2NhdGlvbihjb29yZHMubGF0aXR1ZGUsIGNvb3Jkcy5sb25naXR1ZGUsIGNvb3Jkcy5hY2N1cmFjeSk7XG4gIH1cblxuICBfZ2V0R2VvKGVuYWJsZUhpZ2hBY2N1cmFjeTogYm9vbGVhbik6IFByb21pc2U8UG9zaXRpb24+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYGVuYWJsZUhpZ2hBY2N1cmFjeTogJHtlbmFibGVIaWdoQWNjdXJhY3l9YCk7XG5cbiAgICAgIHRoaXMuX25hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocmVzb2x2ZSwgcmVqZWN0LCB7IGVuYWJsZUhpZ2hBY2N1cmFjeSB9KVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0b3IgfSBmcm9tICcuL25hdmlnYXRvci9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgT3BlbklkU2NvcGVQYXJzZXIgfSBmcm9tICcuL3Njb3BlUGFyc2VyJztcblxuXG4vKipcbiAqIExvZ2luIG9wdGlvbnMuXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIExvZ2luT3B0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgTG9naW5PcHRpb25zIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRJZCBQdWJsaWMgY2xpZW50IElEIGdlbmVyYXRlZCBkdXJpbmcgY3JlYXRpbmcgdGhlIGFjY291bnQuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWRpcmVjdFVyaSBSZWRpcmVjdCBVUkkgdG8gd2hpY2ggdGhlIHJlc3BvbnNlIHdpbGwgYmUgc2VudC4gSWYgdGhlIHZhbHVlIGlzIG5vdCB3aGl0ZWxpc3RlZCB0aGVuIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgcmVkaXJlY3RVcmk6IHN0cmluZztcblxuICAvKipcbiAgICogQHBhcmFtIHtPcGVuSWRTY29wZVBhcnNlcn0gc2NvcGUgRWFjaCBzY29wZSByZXR1cm5zIGEgc2V0IG9mIHVzZXIgYXR0cmlidXRlcywgd2hpY2ggYXJlIGNhbGxlZCBjbGFpbXMuXG4gICAqICAgIE9uY2UgdGhlIHVzZXIgYXV0aG9yaXplcyB0aGUgcmVxdWVzdGVkIHNjb3BlcywgdGhlIGNsYWltcyBhcmUgcmV0dXJuZWQgaW4gYW4gSUQgVG9rZW4uXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IHNjb3BlOiBPcGVuSWRTY29wZVBhcnNlcjtcblxuICAvKipcbiAgKiBAcGFyYW0ge05hdmlnYXRvcn0gbmF2aWdhdG9yIENsYXNzIGRlc2NyaWJlcyBhbiBhY3Rpb24gdGhhdCB3aWxsIGJlIGRvbmUgdG8gQXV0aGVudGljYXRpb24gVVJMLiBGb3IgYnJvd3NlcnMgaXQgd2lsbCBiZSBhIHBhZ2UgcmVkaXJlY3Rpb24uXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IG5hdmlnYXRvcjogTmF2aWdhdG9yO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29yaWdpbl0gVGhlIG9yaWdpbiBkb21haW4gb2YgdGhlIHJlcXVlc3QgYmVpbmcgbWFkZS4gSWYgYG51bGxgIHRoZW4gdGhlIFJlZmVyZXIgaGVhZGVyIHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgb3JpZ2luOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RhdGVdXG4gICAqICAgIFJFQ09NTUVOREVELiBPcGFxdWUgdmFsdWUgdXNlZCB0byBtYWludGFpbiBzdGF0ZSBiZXR3ZWVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgY2FsbGJhY2suIFR5cGljYWxseSwgQ1NSRiwgWFNSRiBtaXRpZ2F0aW9uIGlzIGRvbmUgYnkgY3J5cHRvZ3JhcGhpY2FsbHkgYmluZGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2l0aCBhIGJyb3dzZXIgY29va2llLlxuICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIHByZXNlcnZlcyBzb21lIHN0YXRlIG9iamVjdCBzZXQgYnkgdGhlIGNsaWVudCBpbiB0aGUgQXV0aGVudGljYXRpb24gcmVxdWVzdCBhbmQgbWFrZXMgaXQgYXZhaWxhYmxlIHRvIHRoZSBjbGllbnQgaW4gdGhlIHJlc3BvbnNlLlxuICAgKiAgICBJdOKAmXMgdGhhdCB1bmlxdWUgYW5kIG5vbi1ndWVzc2FibGUgdmFsdWUgdGhhdCBhbGxvd3MgeW91IHRvIHByZXZlbnQgdGhlIGF0dGFjayBieSBjb25maXJtaW5nIGlmIHRoZSB2YWx1ZSBjb21pbmcgZnJvbSB0aGUgcmVzcG9uc2UgbWF0Y2hlcyB0aGUgb25lIHlvdSBleHBlY3QgKHRoZSBvbmUgeW91IGdlbmVyYXRlZCB3aGVuIGluaXRpYXRpbmcgdGhlIHJlcXVlc3QpLlxuICAgKiAgICBUaGUgc3RhdGUgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHNvIHlvdSBjYW4gZW5jb2RlIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbiBpdC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgc3RhdGU6IHN0cmluZztcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtub25jZV1cbiAgICogICAgU3RyaW5nIHZhbHVlIHVzZWQgdG8gYXNzb2NpYXRlIGEgQ2xpZW50IHNlc3Npb24gd2l0aCBhbiBJRCBUb2tlbiwgYW5kIHRvIG1pdGlnYXRlIHJlcGxheSBhdHRhY2tzLlxuICAgKiAgICBUaGUgdmFsdWUgaXMgcGFzc2VkIHRocm91Z2ggdW5tb2RpZmllZCBmcm9tIHRoZSBBdXRoZW50aWNhdGlvbiBSZXF1ZXN0IHRvIHRoZSBJRCBUb2tlbi5cbiAgICogICAgU3VmZmljaWVudCBlbnRyb3B5IE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgbm9uY2UgdmFsdWVzIHVzZWQgdG8gcHJldmVudCBhdHRhY2tlcnMgZnJvbSBndWVzc2luZyB2YWx1ZXMuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IG5vbmNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VUeXBlPSdjb2RlJ10gT3BlbklkIHJlc3BvbnNlIHR5cGUuIFRoZSBkZWZhdWx0IGlzIGBjb2RlYCAoQ29kZSBGbG93LCBpbnZvbHZpbmcgdGhlIGZyb250LWNoYW5uZWwgYW5kIGJhY2tjaGFubmVsKS5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgcmVzcG9uc2VUeXBlOiBzdHJpbmcgPSAnY29kZSc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5IEl0IHNwZWNpZmllcyBob3cgdGhlIEF1dGhvcml6YXRpb24gU2VydmVyIGRpc3BsYXlzIHRoZSBhdXRoZW50aWNhdGlvbiBhbmQgY29uc2VudCB1c2VyIGludGVyZmFjZSBwYWdlcyB0byB0aGUgRW5kLVVzZXIuXG4gICAqICAgRGVmYXVsdCBhbmQgdGhlIG9ubHkgc3VwcG9ydGVkIHZhbHVlIGlzIGBwYWdlYC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIExvZ2luT3B0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgZGlzcGxheTogc3RyaW5nID0gJ3BhZ2UnXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgU3BhY2UgZGVsaW1pdGVkLCBjYXNlIHNlbnNpdGl2ZSBsaXN0IG9mIHN0cmluZyB2YWx1ZXMgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXJcbiAgICogICBwcm9tcHRzIHRoZSBFbmQtVXNlciBmb3IgcmVhdXRoZW50aWNhdGlvbiBhbmQgY29uc2VudC4gVGhlIGRlZmluZWQgdmFsdWVzIGFyZTogYGxvZ2luYCwgYG5vbmVgLlxuICAgKiAgIERlZmF1bHQgaXMgYGxvZ2luLG5vbmVgLiBDYW4ndCBiZSBjaGFuZ2VkIGZvciBub3cuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IHByb21wdDogc3RyaW5nID0gJ2xvZ2luLG5vbmUnXG5cbiAgLyoqXG4gICAqIFRoZW1lIG9mIHRoZSBsb2dpbiBwYWdlIG9mIEN5YmVydXMgS2V5IERhc2hib2FyZC4gRGVmYXVsdCBpcyBgZGVmYXVsdGAuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBMb2dpbk9wdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IHRoZW1lOiBzdHJpbmcgPSAnZGVmYXVsdCc7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==